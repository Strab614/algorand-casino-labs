/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "optIntoPayAsset()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "setManager(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "createApplication(uint64,address)void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "deleteApplication()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "withdrawPayAsset(uint64)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "addSwap(uint64,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "removeSwap(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "doSwap(axfer)void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  bare_call_config: {
    no_op: "NEVER",
    opt_in: "NEVER",
    close_out: "NEVER",
    update_application: "NEVER",
    delete_application: "NEVER",
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {
        manager: {
          type: "bytes",
          key: "manager",
        },
        payAsset: {
          type: "uint64",
          key: "payAsset",
        },
        receiver: {
          type: "bytes",
          key: "receiver",
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 2,
      num_uints: 1,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  contract: {
    name: "NftBuyBack",
    desc: "",
    methods: [
      {
        name: "optIntoPayAsset",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "setManager",
        args: [
          {
            name: "manager",
            type: "address",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "createApplication",
        args: [
          {
            name: "payAsset",
            type: "uint64",
          },
          {
            name: "receiver",
            type: "address",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "deleteApplication",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "withdrawPayAsset",
        args: [
          {
            name: "amount",
            type: "uint64",
          },
        ],
        returns: {
          type: "uint64",
        },
      },
      {
        name: "addSwap",
        args: [
          {
            name: "nft",
            type: "uint64",
          },
          {
            name: "price",
            type: "uint64",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "removeSwap",
        args: [
          {
            name: "nft",
            type: "uint64",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "doSwap",
        args: [
          {
            name: "nftAxfer",
            type: "axfer",
          },
        ],
        returns: {
          type: "void",
        },
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  | "skipWaiting"
  | "maxRoundsToWaitForConfirmation"
  | "populateAppCallResources"
  | "suppressLog"
>;

/**
 * Defines the types of available calls and state of the NftBuyBack smart contract.
 */
export type NftBuyBack = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "optIntoPayAsset()void" | "optIntoPayAsset",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "setManager(address)void" | "setManager",
      {
        argsObj: {
          manager: string;
        };
        argsTuple: [manager: string];
        returns: void;
      }
    > &
    Record<
      "createApplication(uint64,address)void" | "createApplication",
      {
        argsObj: {
          payAsset: bigint | number;
          receiver: string;
        };
        argsTuple: [payAsset: bigint | number, receiver: string];
        returns: void;
      }
    > &
    Record<
      "deleteApplication()void" | "deleteApplication",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "withdrawPayAsset(uint64)uint64" | "withdrawPayAsset",
      {
        argsObj: {
          amount: bigint | number;
        };
        argsTuple: [amount: bigint | number];
        returns: bigint;
      }
    > &
    Record<
      "addSwap(uint64,uint64)void" | "addSwap",
      {
        argsObj: {
          nft: bigint | number;
          price: bigint | number;
        };
        argsTuple: [nft: bigint | number, price: bigint | number];
        returns: void;
      }
    > &
    Record<
      "removeSwap(uint64)void" | "removeSwap",
      {
        argsObj: {
          nft: bigint | number;
        };
        argsTuple: [nft: bigint | number];
        returns: void;
      }
    > &
    Record<
      "doSwap(axfer)void" | "doSwap",
      {
        argsObj: {
          nftAxfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          nftAxfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      manager?: BinaryState;
      payAsset?: IntegerState;
      receiver?: BinaryState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type NftBuyBackSig = keyof NftBuyBack["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends NftBuyBackSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the NftBuyBack smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends NftBuyBackSig> =
  NftBuyBack["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the NftBuyBack smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftBuyBackSig> =
  NftBuyBack["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type NftBuyBackCreateCalls = (typeof NftBuyBackCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type NftBuyBackCreateCallParams =
  | TypedCallParams<"createApplication(uint64,address)void"> & OnCompleteNoOp;
/**
 * A factory for available 'delete' calls
 */
export type NftBuyBackDeleteCalls = (typeof NftBuyBackCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type NftBuyBackDeleteCallParams =
  TypedCallParams<"deleteApplication()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type NftBuyBackDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: NftBuyBackCreateCalls
  ) => NftBuyBackCreateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (
    callFactory: NftBuyBackDeleteCalls
  ) => NftBuyBackDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class NftBuyBackCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the NftBuyBack smart contract using the createApplication(uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication(uint64,address)void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method: "createApplication(uint64,address)void" as const,
          methodArgs: Array.isArray(args)
            ? args
            : [args.payAsset, args.receiver],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the NftBuyBack smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: "deleteApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the optIntoPayAsset()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoPayAsset(
    args: MethodArgs<"optIntoPayAsset()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "optIntoPayAsset()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the setManager(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "setManager(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the withdrawPayAsset(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawPayAsset(
    args: MethodArgs<"withdrawPayAsset(uint64)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "withdrawPayAsset(uint64)uint64" as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the addSwap(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addSwap(
    args: MethodArgs<"addSwap(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "addSwap(uint64,uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.nft, args.price],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the removeSwap(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeSwap(
    args: MethodArgs<"removeSwap(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "removeSwap(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.nft],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the doSwap(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static doSwap(
    args: MethodArgs<"doSwap(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "doSwap(axfer)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAxfer],
      ...params,
    };
  }
}

/**
 * A client to make calls to the NftBuyBack smart contract
 */
export class NftBuyBackClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `NftBuyBackClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof NftBuyBack["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the NftBuyBack smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: NftBuyBackDeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(NftBuyBackCallFactory.create);
    const deleteArgs = params.deleteCall?.(NftBuyBackCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the NftBuyBack smart contract using the createApplication(uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication(uint64,address)void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"createApplication(uint64,address)void">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            NftBuyBackCallFactory.create.createApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the NftBuyBack smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams = {}
      ) {
        return $this.mapReturnValue<MethodReturn<"deleteApplication()void">>(
          await $this.appClient.delete(
            NftBuyBackCallFactory.delete.deleteApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the NftBuyBack smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the optIntoPayAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoPayAsset(
    args: MethodArgs<"optIntoPayAsset()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.optIntoPayAsset(args, params));
  }

  /**
   * Calls the setManager(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.setManager(args, params));
  }

  /**
   * Calls the withdrawPayAsset(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawPayAsset(
    args: MethodArgs<"withdrawPayAsset(uint64)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.withdrawPayAsset(args, params));
  }

  /**
   * Calls the addSwap(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addSwap(
    args: MethodArgs<"addSwap(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.addSwap(args, params));
  }

  /**
   * Calls the removeSwap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeSwap(
    args: MethodArgs<"removeSwap(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.removeSwap(args, params));
  }

  /**
   * Calls the doSwap(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public doSwap(
    args: MethodArgs<"doSwap(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(NftBuyBackCallFactory.doSwap(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<NftBuyBack["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get manager() {
        return NftBuyBackClient.getBinaryState(state, "manager");
      },
      get payAsset() {
        return NftBuyBackClient.getIntegerState(state, "payAsset");
      },
      get receiver() {
        return NftBuyBackClient.getBinaryState(state, "receiver");
      },
    };
  }

  public compose(): NftBuyBackComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      optIntoPayAsset(
        args: MethodArgs<"optIntoPayAsset()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.optIntoPayAsset(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      setManager(
        args: MethodArgs<"setManager(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.setManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      withdrawPayAsset(
        args: MethodArgs<"withdrawPayAsset(uint64)uint64">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.withdrawPayAsset(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addSwap(
        args: MethodArgs<"addSwap(uint64,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.addSwap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      removeSwap(
        args: MethodArgs<"removeSwap(uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.removeSwap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      doSwap(
        args: MethodArgs<"doSwap(axfer)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.doSwap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get delete() {
        const $this = this;
        return {
          deleteApplication(
            args: MethodArgs<"deleteApplication()void">,
            params?: AppClientComposeCallCoreParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.deleteApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options })
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as NftBuyBackComposer;
  }
}
export type NftBuyBackComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optIntoPayAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoPayAsset(
    args: MethodArgs<"optIntoPayAsset()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<[...TReturns, MethodReturn<"optIntoPayAsset()void">]>;

  /**
   * Calls the setManager(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setManager(
    args: MethodArgs<"setManager(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<[...TReturns, MethodReturn<"setManager(address)void">]>;

  /**
   * Calls the withdrawPayAsset(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPayAsset(
    args: MethodArgs<"withdrawPayAsset(uint64)uint64">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<
    [...TReturns, MethodReturn<"withdrawPayAsset(uint64)uint64">]
  >;

  /**
   * Calls the addSwap(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addSwap(
    args: MethodArgs<"addSwap(uint64,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<
    [...TReturns, MethodReturn<"addSwap(uint64,uint64)void">]
  >;

  /**
   * Calls the removeSwap(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeSwap(
    args: MethodArgs<"removeSwap(uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<[...TReturns, MethodReturn<"removeSwap(uint64)void">]>;

  /**
   * Calls the doSwap(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doSwap(
    args: MethodArgs<"doSwap(axfer)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<[...TReturns, MethodReturn<"doSwap(axfer)void">]>;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the NftBuyBack smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      args: MethodArgs<"deleteApplication()void">,
      params?: AppClientComposeCallCoreParams
    ): NftBuyBackComposer<
      [...TReturns, MethodReturn<"deleteApplication()void">]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the NftBuyBack smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
  ): NftBuyBackComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): NftBuyBackComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions
  ): Promise<NftBuyBackComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams
  ): Promise<NftBuyBackComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type NftBuyBackComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type NftBuyBackComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};

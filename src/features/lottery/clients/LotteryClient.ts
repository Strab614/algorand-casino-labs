/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: any = {
  hints: {
    "setManager(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getManager()address": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getMbrCost(uint16[5][])uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getWinningNumbers()uint16[5]": {
      call_config: {
        no_op: "CALL",
      },
    },
    "createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "deleteApplication()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "bootstrap()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "addPrizePool(axfer)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "setEntry(axfer,uint16[5][])void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "draw()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getRefund(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "payWinner(address,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "userCleanup(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  bare_call_config: {
    no_op: "NEVER",
    opt_in: "NEVER",
    close_out: "NEVER",
    update_application: "NEVER",
    delete_application: "NEVER",
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {
        _manager: {
          type: "bytes",
          key: "ma",
        },
        _beaconAppId: {
          type: "uint64",
          key: "ba",
        },
        _commitmentRound: {
          type: "uint64",
          key: "dr",
        },
        _randomBytes: {
          type: "bytes",
          key: "ra",
        },
        _pcgState: {
          type: "uint64",
          key: "ps",
        },
        name: {
          type: "bytes",
          key: "na",
        },
        asa: {
          type: "uint64",
          key: "as",
        },
        ticketPrice: {
          type: "uint64",
          key: "tp",
        },
        feePercent: {
          type: "uint64",
          key: "fp",
        },
        endRound: {
          type: "uint64",
          key: "er",
        },
        ticketsSold: {
          type: "uint64",
          key: "ts",
        },
        totalFees: {
          type: "uint64",
          key: "tf",
        },
        prizePool: {
          type: "uint64",
          key: "pp",
        },
        winningNumbers: {
          type: "bytes",
          key: "wn",
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 4,
      num_uints: 10,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  contract: {
    name: "Lottery",
    desc: "",
    methods: [
      {
        name: "setManager",
        desc: "Changes which address can manage this contract",
        args: [
          {
            name: "manager",
            type: "address",
            desc: "the Address that will be able to manage the contract",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "getManager",
        desc: "Returns the current manager",
        args: [],
        returns: {
          type: "address",
          desc: "The current managers Address",
        },
      },
      {
        name: "getMbrCost",
        desc: "Gets MBR cost for the box",
        readonly: true,
        args: [
          {
            name: "entry",
            type: "uint16[5][]",
          },
        ],
        returns: {
          type: "uint64",
          desc: "MBR cost for the box",
        },
      },
      {
        name: "getWinningNumbers",
        desc: "Returns the winning lottery numbers (can use algod simulate instead of indexer)",
        readonly: true,
        args: [],
        returns: {
          type: "uint16[5]",
          desc: "The winning lottery numbers as a`LotteryNumbers`type",
        },
      },
      {
        name: "createApplication",
        desc: "create the application",
        args: [
          {
            name: "name",
            type: "string",
            desc: "the Name of the lottery",
          },
          {
            name: "asa",
            type: "uint64",
            desc: "the Asset we accept as payment",
          },
          {
            name: "beaconAppId",
            type: "uint64",
            desc: "AppID of the randomness beacon",
          },
          {
            name: "endRound",
            type: "uint64",
            desc: "the round from when the lottery will no longer allow entries",
          },
          {
            name: "drawRound",
            type: "uint64",
            desc: "the round from when we can draw the lottery",
          },
          {
            name: "ticketPrice",
            type: "uint64",
            desc: "how much does a ticket cost",
          },
          {
            name: "feePercent",
            type: "uint64",
            desc: "what percent of ticketPrice will we take as fees",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "deleteApplication",
        desc: "Delete application and closeOut to manager address",
        args: [],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "DeleteEvent",
            args: [
              {
                name: "fees",
                type: "uint64",
              },
              {
                name: "prizePool",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "bootstrap",
        desc: "Initialiase the app after creation",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "addPrizePool",
        desc: "Add additional prizepool asa",
        args: [
          {
            name: "axfer",
            type: "axfer",
            desc: "the asset transfer txn",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "PrizePoolAddedEvent",
            args: [
              {
                name: "amount",
                type: "uint64",
              },
              {
                name: "address",
                type: "address",
              },
              {
                name: "total",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "setEntry",
        desc: "Allow user to purchase ticket(s) of the lottery",
        args: [
          {
            name: "axfer",
            type: "axfer",
            desc: "AssetTransferTxn to pay for the tickets",
          },
          {
            name: "entry",
            type: "uint16[5][]",
            desc: "LotteryNumbers[] for the user",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "BuyTicketEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "entries",
                type: "uint16[5][]",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "draw",
        desc: "Perform the lottery draw and set`winningNumbers`",
        args: [],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "DrawEvent",
            args: [
              {
                name: "numbers",
                type: "uint16[5]",
              },
              {
                name: "randomness",
                type: "byte[]",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "getRefund",
        desc: "Get a refund if the lottery is never drawn",
        args: [
          {
            name: "address",
            type: "address",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "RefundEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "amount",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "payWinner",
        desc: "Payout winning users, only callable by manager",
        args: [
          {
            name: "address",
            type: "address",
            desc: "Address of the user",
          },
          {
            name: "amount",
            type: "uint64",
            desc: "How much of asa to send",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "WinnerPaidEvent",
            args: [
              {
                name: "amount",
                type: "uint64",
              },
              {
                name: "address",
                type: "address",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "userCleanup",
        desc: "Allow users box storage to be deleted and MBR cost refunded to the user",
        args: [
          {
            name: "address",
            type: "address",
            desc: "Address of the user",
          },
        ],
        returns: {
          type: "void",
        },
      },
    ],
    events: [
      {
        name: "PrizePoolAddedEvent",
        args: [
          {
            name: "amount",
            type: "uint64",
          },
          {
            name: "address",
            type: "address",
          },
          {
            name: "total",
            type: "uint64",
          },
        ],
        desc: "",
      },
      {
        name: "BuyTicketEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "entries",
            type: "uint16[5][]",
          },
        ],
        desc: "",
      },
      {
        name: "RefundEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "amount",
            type: "uint64",
          },
        ],
        desc: "",
      },
      {
        name: "DrawEvent",
        args: [
          {
            name: "numbers",
            type: "uint16[5]",
          },
          {
            name: "randomness",
            type: "byte[]",
          },
        ],
        desc: "",
      },
      {
        name: "WinnerPaidEvent",
        args: [
          {
            name: "amount",
            type: "uint64",
          },
          {
            name: "address",
            type: "address",
          },
        ],
        desc: "",
      },
      {
        name: "DeleteEvent",
        args: [
          {
            name: "fees",
            type: "uint64",
          },
          {
            name: "prizePool",
            type: "uint64",
          },
        ],
        desc: "",
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  | "skipWaiting"
  | "maxRoundsToWaitForConfirmation"
  | "populateAppCallResources"
  | "suppressLog"
>;

/**
 * Defines the types of available calls and state of the Lottery smart contract.
 */
export type Lottery = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "setManager(address)void" | "setManager",
    {
      argsObj: {
        /**
         * the Address that will be able to manage the contract
         */
        manager: string;
      };
      argsTuple: [manager: string];
      returns: void;
    }
  > &
    Record<
      "getManager()address" | "getManager",
      {
        argsObj: {};
        argsTuple: [];
        /**
         * The current managers Address
         */
        returns: string;
      }
    > &
    Record<
      "getMbrCost(uint16[5][])uint64" | "getMbrCost",
      {
        argsObj: {
          entry: [number, number, number, number, number][];
        };
        argsTuple: [entry: [number, number, number, number, number][]];
        /**
         * MBR cost for the box
         */
        returns: bigint;
      }
    > &
    Record<
      "getWinningNumbers()uint16[5]" | "getWinningNumbers",
      {
        argsObj: {};
        argsTuple: [];
        /**
         * The winning lottery numbers as a`LotteryNumbers`type
         */
        returns: [number, number, number, number, number];
      }
    > &
    Record<
      | "createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void"
      | "createApplication",
      {
        argsObj: {
          /**
           * the Name of the lottery
           */
          name: string;
          /**
           * the Asset we accept as payment
           */
          asa: bigint | number;
          /**
           * AppID of the randomness beacon
           */
          beaconAppId: bigint | number;
          /**
           * the round from when the lottery will no longer allow entries
           */
          endRound: bigint | number;
          /**
           * the round from when we can draw the lottery
           */
          drawRound: bigint | number;
          /**
           * how much does a ticket cost
           */
          ticketPrice: bigint | number;
          /**
           * what percent of ticketPrice will we take as fees
           */
          feePercent: bigint | number;
        };
        argsTuple: [
          name: string,
          asa: bigint | number,
          beaconAppId: bigint | number,
          endRound: bigint | number,
          drawRound: bigint | number,
          ticketPrice: bigint | number,
          feePercent: bigint | number
        ];
        returns: void;
      }
    > &
    Record<
      "deleteApplication()void" | "deleteApplication",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "bootstrap()void" | "bootstrap",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "addPrizePool(axfer)void" | "addPrizePool",
      {
        argsObj: {
          /**
           * the asset transfer txn
           */
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    > &
    Record<
      "setEntry(axfer,uint16[5][])void" | "setEntry",
      {
        argsObj: {
          /**
           * AssetTransferTxn to pay for the tickets
           */
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * LotteryNumbers[] for the user
           */
          entry: [number, number, number, number, number][];
        };
        argsTuple: [
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          entry: [number, number, number, number, number][]
        ];
        returns: void;
      }
    > &
    Record<
      "draw()void" | "draw",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "getRefund(address)void" | "getRefund",
      {
        argsObj: {
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    > &
    Record<
      "payWinner(address,uint64)void" | "payWinner",
      {
        argsObj: {
          /**
           * Address of the user
           */
          address: string;
          /**
           * How much of asa to send
           */
          amount: bigint | number;
        };
        argsTuple: [address: string, amount: bigint | number];
        returns: void;
      }
    > &
    Record<
      "userCleanup(address)void" | "userCleanup",
      {
        argsObj: {
          /**
           * Address of the user
           */
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      ma?: BinaryState;
      ba?: IntegerState;
      dr?: IntegerState;
      ra?: BinaryState;
      ps?: IntegerState;
      na?: BinaryState;
      as?: IntegerState;
      tp?: IntegerState;
      fp?: IntegerState;
      er?: IntegerState;
      ts?: IntegerState;
      tf?: IntegerState;
      pp?: IntegerState;
      wn?: BinaryState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type LotterySig = keyof Lottery["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LotterySig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the Lottery smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LotterySig> =
  Lottery["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Lottery smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LotterySig> =
  Lottery["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type LotteryCreateCalls = (typeof LotteryCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type LotteryCreateCallParams =
  TypedCallParams<"createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void"> &
    OnCompleteNoOp;
/**
 * A factory for available 'delete' calls
 */
export type LotteryDeleteCalls = (typeof LotteryCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type LotteryDeleteCallParams =
  TypedCallParams<"deleteApplication()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type LotteryDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LotteryCreateCalls) => LotteryCreateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: LotteryDeleteCalls) => LotteryDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LotteryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Lottery smart contract using the createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method:
            "createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void" as const,
          methodArgs: Array.isArray(args)
            ? args
            : [
                args.name,
                args.asa,
                args.beaconAppId,
                args.endRound,
                args.drawRound,
                args.ticketPrice,
                args.feePercent,
              ],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Lottery smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: "deleteApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the setManager(address)void ABI method
   *
   * Changes which address can manage this contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "setManager(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.manager],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getManager()address ABI method
   *
   * Returns the current manager
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getManager(
    args: MethodArgs<"getManager()address">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getManager()address" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getMbrCost(uint16[5][])uint64 ABI method
   *
   * Gets MBR cost for the box
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbrCost(
    args: MethodArgs<"getMbrCost(uint16[5][])uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getMbrCost(uint16[5][])uint64" as const,
      methodArgs: Array.isArray(args) ? args : [args.entry],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getWinningNumbers()uint16[5] ABI method
   *
   * Returns the winning lottery numbers (can use algod simulate instead of indexer)
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getWinningNumbers(
    args: MethodArgs<"getWinningNumbers()uint16[5]">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getWinningNumbers()uint16[5]" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Initialiase the app after creation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "bootstrap()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the addPrizePool(axfer)void ABI method
   *
   * Add additional prizepool asa
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "addPrizePool(axfer)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the setEntry(axfer,uint16[5][])void ABI method
   *
   * Allow user to purchase ticket(s) of the lottery
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setEntry(
    args: MethodArgs<"setEntry(axfer,uint16[5][])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "setEntry(axfer,uint16[5][])void" as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer, args.entry],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the draw()void ABI method
   *
   * Perform the lottery draw and set`winningNumbers`
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static draw(
    args: MethodArgs<"draw()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "draw()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getRefund(address)void ABI method
   *
   * Get a refund if the lottery is never drawn
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRefund(
    args: MethodArgs<"getRefund(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getRefund(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the payWinner(address,uint64)void ABI method
   *
   * Payout winning users, only callable by manager
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payWinner(
    args: MethodArgs<"payWinner(address,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "payWinner(address,uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.address, args.amount],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the userCleanup(address)void ABI method
   *
   * Allow users box storage to be deleted and MBR cost refunded to the user
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static userCleanup(
    args: MethodArgs<"userCleanup(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "userCleanup(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
}

/**
 * A client to make calls to the Lottery smart contract
 */
export class LotteryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `LotteryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Lottery["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the Lottery smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: LotteryDeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(LotteryCallFactory.create);
    const deleteArgs = params.deleteCall?.(LotteryCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the Lottery smart contract using the createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"createApplication(string,uint64,uint64,uint64,uint64,uint64,uint64)void">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            LotteryCallFactory.create.createApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the Lottery smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams = {}
      ) {
        return $this.mapReturnValue<MethodReturn<"deleteApplication()void">>(
          await $this.appClient.delete(
            LotteryCallFactory.delete.deleteApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the Lottery smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the setManager(address)void ABI method.
   *
   * Changes which address can manage this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.setManager(args, params));
  }

  /**
   * Calls the getManager()address ABI method.
   *
   * Returns the current manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The current managers Address
   */
  public getManager(
    args: MethodArgs<"getManager()address">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.getManager(args, params));
  }

  /**
   * Calls the getMbrCost(uint16[5][])uint64 ABI method.
   *
   * Gets MBR cost for the box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: MBR cost for the box
   */
  public getMbrCost(
    args: MethodArgs<"getMbrCost(uint16[5][])uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.getMbrCost(args, params));
  }

  /**
   * Calls the getWinningNumbers()uint16[5] ABI method.
   *
   * Returns the winning lottery numbers (can use algod simulate instead of indexer)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The winning lottery numbers as a`LotteryNumbers`type
   */
  public getWinningNumbers(
    args: MethodArgs<"getWinningNumbers()uint16[5]">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.getWinningNumbers(args, params));
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialiase the app after creation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.bootstrap(args, params));
  }

  /**
   * Calls the addPrizePool(axfer)void ABI method.
   *
   * Add additional prizepool asa
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.addPrizePool(args, params));
  }

  /**
   * Calls the setEntry(axfer,uint16[5][])void ABI method.
   *
   * Allow user to purchase ticket(s) of the lottery
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setEntry(
    args: MethodArgs<"setEntry(axfer,uint16[5][])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.setEntry(args, params));
  }

  /**
   * Calls the draw()void ABI method.
   *
   * Perform the lottery draw and set`winningNumbers`
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public draw(
    args: MethodArgs<"draw()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.draw(args, params));
  }

  /**
   * Calls the getRefund(address)void ABI method.
   *
   * Get a refund if the lottery is never drawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRefund(
    args: MethodArgs<"getRefund(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.getRefund(args, params));
  }

  /**
   * Calls the payWinner(address,uint64)void ABI method.
   *
   * Payout winning users, only callable by manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payWinner(
    args: MethodArgs<"payWinner(address,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.payWinner(args, params));
  }

  /**
   * Calls the userCleanup(address)void ABI method.
   *
   * Allow users box storage to be deleted and MBR cost refunded to the user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public userCleanup(
    args: MethodArgs<"userCleanup(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(LotteryCallFactory.userCleanup(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Lottery["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get ma() {
        return LotteryClient.getBinaryState(state, "ma");
      },
      get ba() {
        return LotteryClient.getIntegerState(state, "ba");
      },
      get dr() {
        return LotteryClient.getIntegerState(state, "dr");
      },
      get ra() {
        return LotteryClient.getBinaryState(state, "ra");
      },
      get ps() {
        return LotteryClient.getIntegerState(state, "ps");
      },
      get na() {
        return LotteryClient.getBinaryState(state, "na");
      },
      get as() {
        return LotteryClient.getIntegerState(state, "as");
      },
      get tp() {
        return LotteryClient.getIntegerState(state, "tp");
      },
      get fp() {
        return LotteryClient.getIntegerState(state, "fp");
      },
      get er() {
        return LotteryClient.getIntegerState(state, "er");
      },
      get ts() {
        return LotteryClient.getIntegerState(state, "ts");
      },
      get tf() {
        return LotteryClient.getIntegerState(state, "tf");
      },
      get pp() {
        return LotteryClient.getIntegerState(state, "pp");
      },
      get wn() {
        return LotteryClient.getBinaryState(state, "wn");
      },
    };
  }

  public compose(): LotteryComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      setManager(
        args: MethodArgs<"setManager(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.setManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getManager(
        args: MethodArgs<"getManager()address">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getMbrCost(
        args: MethodArgs<"getMbrCost(uint16[5][])uint64">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getMbrCost(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getWinningNumbers(
        args: MethodArgs<"getWinningNumbers()uint16[5]">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getWinningNumbers(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      bootstrap(
        args: MethodArgs<"bootstrap()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addPrizePool(
        args: MethodArgs<"addPrizePool(axfer)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.addPrizePool(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      setEntry(
        args: MethodArgs<"setEntry(axfer,uint16[5][])void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.setEntry(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      draw(
        args: MethodArgs<"draw()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.draw(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getRefund(
        args: MethodArgs<"getRefund(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getRefund(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      payWinner(
        args: MethodArgs<"payWinner(address,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.payWinner(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      userCleanup(
        args: MethodArgs<"userCleanup(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.userCleanup(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get delete() {
        const $this = this;
        return {
          deleteApplication(
            args: MethodArgs<"deleteApplication()void">,
            params?: AppClientComposeCallCoreParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.deleteApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options })
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as LotteryComposer;
  }
}
export type LotteryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setManager(address)void ABI method.
   *
   * Changes which address can manage this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setManager(
    args: MethodArgs<"setManager(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"setManager(address)void">]>;

  /**
   * Calls the getManager()address ABI method.
   *
   * Returns the current manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getManager(
    args: MethodArgs<"getManager()address">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"getManager()address">]>;

  /**
   * Calls the getMbrCost(uint16[5][])uint64 ABI method.
   *
   * Gets MBR cost for the box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrCost(
    args: MethodArgs<"getMbrCost(uint16[5][])uint64">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<
    [...TReturns, MethodReturn<"getMbrCost(uint16[5][])uint64">]
  >;

  /**
   * Calls the getWinningNumbers()uint16[5] ABI method.
   *
   * Returns the winning lottery numbers (can use algod simulate instead of indexer)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getWinningNumbers(
    args: MethodArgs<"getWinningNumbers()uint16[5]">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<
    [...TReturns, MethodReturn<"getWinningNumbers()uint16[5]">]
  >;

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialiase the app after creation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"bootstrap()void">]>;

  /**
   * Calls the addPrizePool(axfer)void ABI method.
   *
   * Add additional prizepool asa
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"addPrizePool(axfer)void">]>;

  /**
   * Calls the setEntry(axfer,uint16[5][])void ABI method.
   *
   * Allow user to purchase ticket(s) of the lottery
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setEntry(
    args: MethodArgs<"setEntry(axfer,uint16[5][])void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<
    [...TReturns, MethodReturn<"setEntry(axfer,uint16[5][])void">]
  >;

  /**
   * Calls the draw()void ABI method.
   *
   * Perform the lottery draw and set`winningNumbers`
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  draw(
    args: MethodArgs<"draw()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"draw()void">]>;

  /**
   * Calls the getRefund(address)void ABI method.
   *
   * Get a refund if the lottery is never drawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRefund(
    args: MethodArgs<"getRefund(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"getRefund(address)void">]>;

  /**
   * Calls the payWinner(address,uint64)void ABI method.
   *
   * Payout winning users, only callable by manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payWinner(
    args: MethodArgs<"payWinner(address,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<
    [...TReturns, MethodReturn<"payWinner(address,uint64)void">]
  >;

  /**
   * Calls the userCleanup(address)void ABI method.
   *
   * Allow users box storage to be deleted and MBR cost refunded to the user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  userCleanup(
    args: MethodArgs<"userCleanup(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, MethodReturn<"userCleanup(address)void">]>;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Lottery smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      args: MethodArgs<"deleteApplication()void">,
      params?: AppClientComposeCallCoreParams
    ): LotteryComposer<[...TReturns, MethodReturn<"deleteApplication()void">]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the Lottery smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
  ): LotteryComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): LotteryComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions
  ): Promise<LotteryComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams
  ): Promise<LotteryComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type LotteryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type LotteryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};

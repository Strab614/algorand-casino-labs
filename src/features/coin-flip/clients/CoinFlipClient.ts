/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: any = {
  hints: {
    "setManager(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getManager()address": {
      call_config: {
        no_op: "CALL",
      },
    },
    "createApplication(string,uint64,uint64,uint64,uint64,uint64)void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "updateApplication()void": {
      call_config: {
        update_application: "CALL",
      },
    },
    "deleteApplication()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "bootstrap()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "getFees()void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "addPrizePool(axfer)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "createGame(axfer,pay,uint64)uint64": {
      call_config: {
        no_op: "CALL",
      },
    },
    "cancelGame(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "completeGame(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  bare_call_config: {
    no_op: "NEVER",
    opt_in: "NEVER",
    close_out: "NEVER",
    update_application: "NEVER",
    delete_application: "NEVER",
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {
        _manager: {
          type: "bytes",
          key: "manager",
        },
        name: {
          type: "bytes",
          key: "name",
        },
        assetId: {
          type: "uint64",
          key: "assetId",
        },
        beaconAppId: {
          type: "uint64",
          key: "beaconAppId",
        },
        feePercent: {
          type: "uint64",
          key: "feePercent",
        },
        minBet: {
          type: "uint64",
          key: "minBet",
        },
        maxBet: {
          type: "uint64",
          key: "maxBet",
        },
        fees: {
          type: "uint64",
          key: "fees",
        },
        prizePool: {
          type: "uint64",
          key: "prizePool",
        },
        totalGames: {
          type: "uint64",
          key: "totalGames",
        },
        totalCancelled: {
          type: "uint64",
          key: "totalCancelled",
        },
        totalHeads: {
          type: "uint64",
          key: "totalHeads",
        },
        totalWagered: {
          type: "uint64",
          key: "totalWagered",
        },
        totalWon: {
          type: "uint64",
          key: "totalWon",
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 2,
      num_uints: 12,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  contract: {
    name: "CoinFlip",
    desc: "",
    methods: [
      {
        name: "setManager",
        desc: "Changes which address can manage this contract",
        args: [
          {
            name: "newManager",
            type: "address",
            desc: "the Address that will be able to manage the contract",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "SetManagerEvent",
            args: [
              {
                name: "oldManager",
                type: "address",
              },
              {
                name: "newManager",
                type: "address",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "getManager",
        desc: "Returns the current manager",
        readonly: true,
        args: [],
        returns: {
          type: "address",
          desc: "The current managers Address",
        },
      },
      {
        name: "createApplication",
        args: [
          {
            name: "name",
            type: "string",
          },
          {
            name: "assetId",
            type: "uint64",
          },
          {
            name: "beaconAppId",
            type: "uint64",
          },
          {
            name: "feePercent",
            type: "uint64",
          },
          {
            name: "minBet",
            type: "uint64",
          },
          {
            name: "maxBet",
            type: "uint64",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "CreateEvent",
            args: [
              {
                name: "name",
                type: "string",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "updateApplication",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "deleteApplication",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "bootstrap",
        desc: "Initialiase the app after creation",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "getFees",
        desc: "Allows manager to claim the fees",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "addPrizePool",
        desc: "Allows prize pool to be added, callable by anyone",
        args: [
          {
            name: "axfer",
            type: "axfer",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "AddPrizePoolEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "amount",
                type: "uint64",
              },
              {
                name: "total",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "createGame",
        desc: "Creates a new game for the caller",
        args: [
          {
            name: "axfer",
            type: "axfer",
          },
          {
            name: "boxFeeTxn",
            type: "pay",
          },
          {
            name: "heads",
            type: "uint64",
          },
        ],
        returns: {
          type: "uint64",
        },
        events: [
          {
            name: "CreateGameEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "wager",
                type: "uint64",
              },
              {
                name: "commitmentRound",
                type: "uint64",
              },
              {
                name: "heads",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "cancelGame",
        desc: "Allows user to cancel the game and request a refund (should be callable by admin)",
        args: [
          {
            name: "address",
            type: "address",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "CancelGameEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "wager",
                type: "uint64",
              },
            ],
            desc: "",
          },
        ],
      },
      {
        name: "completeGame",
        desc: "Completes a game by calling the beacon, determining the result and paying out the user",
        args: [
          {
            name: "address",
            type: "address",
          },
        ],
        returns: {
          type: "void",
        },
        events: [
          {
            name: "CompleteGameEvent",
            args: [
              {
                name: "address",
                type: "address",
              },
              {
                name: "wager",
                type: "uint64",
              },
              {
                name: "won",
                type: "uint64",
              },
              {
                name: "randomness",
                type: "byte[]",
              },
            ],
            desc: "",
          },
        ],
      },
    ],
    events: [
      {
        name: "SetManagerEvent",
        args: [
          {
            name: "oldManager",
            type: "address",
          },
          {
            name: "newManager",
            type: "address",
          },
        ],
        desc: "",
      },
      {
        name: "CreateEvent",
        args: [
          {
            name: "name",
            type: "string",
          },
        ],
        desc: "",
      },
      {
        name: "AddPrizePoolEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "amount",
            type: "uint64",
          },
          {
            name: "total",
            type: "uint64",
          },
        ],
        desc: "",
      },
      {
        name: "CreateGameEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "wager",
            type: "uint64",
          },
          {
            name: "commitmentRound",
            type: "uint64",
          },
          {
            name: "heads",
            type: "uint64",
          },
        ],
        desc: "",
      },
      {
        name: "CancelGameEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "wager",
            type: "uint64",
          },
        ],
        desc: "",
      },
      {
        name: "CompleteGameEvent",
        args: [
          {
            name: "address",
            type: "address",
          },
          {
            name: "wager",
            type: "uint64",
          },
          {
            name: "won",
            type: "uint64",
          },
          {
            name: "randomness",
            type: "byte[]",
          },
        ],
        desc: "",
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  | "skipWaiting"
  | "maxRoundsToWaitForConfirmation"
  | "populateAppCallResources"
  | "suppressLog"
>;

/**
 * Defines the types of available calls and state of the CoinFlip smart contract.
 */
export type CoinFlip = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "setManager(address)void" | "setManager",
    {
      argsObj: {
        /**
         * the Address that will be able to manage the contract
         */
        newManager: string;
      };
      argsTuple: [newManager: string];
      returns: void;
    }
  > &
    Record<
      "getManager()address" | "getManager",
      {
        argsObj: {};
        argsTuple: [];
        /**
         * The current managers Address
         */
        returns: string;
      }
    > &
    Record<
      | "createApplication(string,uint64,uint64,uint64,uint64,uint64)void"
      | "createApplication",
      {
        argsObj: {
          name: string;
          assetId: bigint | number;
          beaconAppId: bigint | number;
          feePercent: bigint | number;
          minBet: bigint | number;
          maxBet: bigint | number;
        };
        argsTuple: [
          name: string,
          assetId: bigint | number,
          beaconAppId: bigint | number,
          feePercent: bigint | number,
          minBet: bigint | number,
          maxBet: bigint | number
        ];
        returns: void;
      }
    > &
    Record<
      "updateApplication()void" | "updateApplication",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "deleteApplication()void" | "deleteApplication",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "bootstrap()void" | "bootstrap",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "getFees()void" | "getFees",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "addPrizePool(axfer)void" | "addPrizePool",
      {
        argsObj: {
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    > &
    Record<
      "createGame(axfer,pay,uint64)uint64" | "createGame",
      {
        argsObj: {
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          boxFeeTxn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          heads: bigint | number;
        };
        argsTuple: [
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          boxFeeTxn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          heads: bigint | number
        ];
        returns: bigint;
      }
    > &
    Record<
      "cancelGame(address)void" | "cancelGame",
      {
        argsObj: {
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    > &
    Record<
      "completeGame(address)void" | "completeGame",
      {
        argsObj: {
          address: string;
        };
        argsTuple: [address: string];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      manager?: BinaryState;
      name?: BinaryState;
      assetId?: IntegerState;
      beaconAppId?: IntegerState;
      feePercent?: IntegerState;
      minBet?: IntegerState;
      maxBet?: IntegerState;
      fees?: IntegerState;
      prizePool?: IntegerState;
      totalGames?: IntegerState;
      totalCancelled?: IntegerState;
      totalHeads?: IntegerState;
      totalWagered?: IntegerState;
      totalWon?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type CoinFlipSig = keyof CoinFlip["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CoinFlipSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the CoinFlip smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CoinFlipSig> =
  CoinFlip["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the CoinFlip smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CoinFlipSig> =
  CoinFlip["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type CoinFlipCreateCalls = (typeof CoinFlipCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type CoinFlipCreateCallParams =
  TypedCallParams<"createApplication(string,uint64,uint64,uint64,uint64,uint64)void"> &
    OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type CoinFlipUpdateCalls = (typeof CoinFlipCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type CoinFlipUpdateCallParams =
  TypedCallParams<"updateApplication()void">;
/**
 * A factory for available 'delete' calls
 */
export type CoinFlipDeleteCalls = (typeof CoinFlipCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type CoinFlipDeleteCallParams =
  TypedCallParams<"deleteApplication()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type CoinFlipDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CoinFlipCreateCalls) => CoinFlipCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: CoinFlipUpdateCalls) => CoinFlipUpdateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CoinFlipDeleteCalls) => CoinFlipDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CoinFlipCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CoinFlip smart contract using the createApplication(string,uint64,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication(string,uint64,uint64,uint64,uint64,uint64)void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method:
            "createApplication(string,uint64,uint64,uint64,uint64,uint64)void" as const,
          methodArgs: Array.isArray(args)
            ? args
            : [
                args.name,
                args.assetId,
                args.beaconAppId,
                args.feePercent,
                args.minBet,
                args.maxBet,
              ],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the CoinFlip smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(
        args: MethodArgs<"updateApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams = {}
      ) {
        return {
          method: "updateApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CoinFlip smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
      ) {
        return {
          method: "deleteApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the setManager(address)void ABI method
   *
   * Changes which address can manage this contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "setManager(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.newManager],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getManager()address ABI method
   *
   * Returns the current manager
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getManager(
    args: MethodArgs<"getManager()address">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getManager()address" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Initialiase the app after creation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "bootstrap()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the getFees()void ABI method
   *
   * Allows manager to claim the fees
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFees(
    args: MethodArgs<"getFees()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "getFees()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the addPrizePool(axfer)void ABI method
   *
   * Allows prize pool to be added, callable by anyone
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "addPrizePool(axfer)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the createGame(axfer,pay,uint64)uint64 ABI method
   *
   * Creates a new game for the caller
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createGame(
    args: MethodArgs<"createGame(axfer,pay,uint64)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "createGame(axfer,pay,uint64)uint64" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.axfer, args.boxFeeTxn, args.heads],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the cancelGame(address)void ABI method
   *
   * Allows user to cancel the game and request a refund (should be callable by admin)
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cancelGame(
    args: MethodArgs<"cancelGame(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "cancelGame(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the completeGame(address)void ABI method
   *
   * Completes a game by calling the beacon, determining the result and paying out the user
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeGame(
    args: MethodArgs<"completeGame(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "completeGame(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    };
  }
}

/**
 * A client to make calls to the CoinFlip smart contract
 */
export class CoinFlipClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `CoinFlipClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CoinFlip["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the CoinFlip smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: CoinFlipDeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(CoinFlipCallFactory.create);
    const updateArgs = params.updateCall?.(CoinFlipCallFactory.update);
    const deleteArgs = params.deleteCall?.(CoinFlipCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the CoinFlip smart contract using the createApplication(string,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication(string,uint64,uint64,uint64,uint64,uint64)void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"createApplication(string,uint64,uint64,uint64,uint64,uint64)void">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            CoinFlipCallFactory.create.createApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the CoinFlip smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(
        args: MethodArgs<"updateApplication()void">,
        params: AppClientCallCoreParams & AppClientCompilationParams = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"updateApplication()void">,
          AppUpdateCallTransactionResult
        >(
          await $this.appClient.update(
            CoinFlipCallFactory.update.updateApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the CoinFlip smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams = {}
      ) {
        return $this.mapReturnValue<MethodReturn<"deleteApplication()void">>(
          await $this.appClient.delete(
            CoinFlipCallFactory.delete.deleteApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the CoinFlip smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the setManager(address)void ABI method.
   *
   * Changes which address can manage this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setManager(
    args: MethodArgs<"setManager(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.setManager(args, params));
  }

  /**
   * Calls the getManager()address ABI method.
   *
   * Returns the current manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The current managers Address
   */
  public getManager(
    args: MethodArgs<"getManager()address">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.getManager(args, params));
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialiase the app after creation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.bootstrap(args, params));
  }

  /**
   * Calls the getFees()void ABI method.
   *
   * Allows manager to claim the fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFees(
    args: MethodArgs<"getFees()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.getFees(args, params));
  }

  /**
   * Calls the addPrizePool(axfer)void ABI method.
   *
   * Allows prize pool to be added, callable by anyone
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.addPrizePool(args, params));
  }

  /**
   * Calls the createGame(axfer,pay,uint64)uint64 ABI method.
   *
   * Creates a new game for the caller
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createGame(
    args: MethodArgs<"createGame(axfer,pay,uint64)uint64">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.createGame(args, params));
  }

  /**
   * Calls the cancelGame(address)void ABI method.
   *
   * Allows user to cancel the game and request a refund (should be callable by admin)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cancelGame(
    args: MethodArgs<"cancelGame(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.cancelGame(args, params));
  }

  /**
   * Calls the completeGame(address)void ABI method.
   *
   * Completes a game by calling the beacon, determining the result and paying out the user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeGame(
    args: MethodArgs<"completeGame(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(CoinFlipCallFactory.completeGame(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CoinFlip["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get manager() {
        return CoinFlipClient.getBinaryState(state, "manager");
      },
      get name() {
        return CoinFlipClient.getBinaryState(state, "name");
      },
      get assetId() {
        return CoinFlipClient.getIntegerState(state, "assetId");
      },
      get beaconAppId() {
        return CoinFlipClient.getIntegerState(state, "beaconAppId");
      },
      get feePercent() {
        return CoinFlipClient.getIntegerState(state, "feePercent");
      },
      get minBet() {
        return CoinFlipClient.getIntegerState(state, "minBet");
      },
      get maxBet() {
        return CoinFlipClient.getIntegerState(state, "maxBet");
      },
      get fees() {
        return CoinFlipClient.getIntegerState(state, "fees");
      },
      get prizePool() {
        return CoinFlipClient.getIntegerState(state, "prizePool");
      },
      get totalGames() {
        return CoinFlipClient.getIntegerState(state, "totalGames");
      },
      get totalCancelled() {
        return CoinFlipClient.getIntegerState(state, "totalCancelled");
      },
      get totalHeads() {
        return CoinFlipClient.getIntegerState(state, "totalHeads");
      },
      get totalWagered() {
        return CoinFlipClient.getIntegerState(state, "totalWagered");
      },
      get totalWon() {
        return CoinFlipClient.getIntegerState(state, "totalWon");
      },
    };
  }

  public compose(): CoinFlipComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      setManager(
        args: MethodArgs<"setManager(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.setManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getManager(
        args: MethodArgs<"getManager()address">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getManager(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      bootstrap(
        args: MethodArgs<"bootstrap()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      getFees(
        args: MethodArgs<"getFees()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getFees(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addPrizePool(
        args: MethodArgs<"addPrizePool(axfer)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.addPrizePool(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      createGame(
        args: MethodArgs<"createGame(axfer,pay,uint64)uint64">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.createGame(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      cancelGame(
        args: MethodArgs<"cancelGame(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.cancelGame(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      completeGame(
        args: MethodArgs<"completeGame(address)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.completeGame(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get update() {
        const $this = this;
        return {
          updateApplication(
            args: MethodArgs<"updateApplication()void">,
            params?: AppClientComposeCallCoreParams & AppClientCompilationParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.update.updateApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get delete() {
        const $this = this;
        return {
          deleteApplication(
            args: MethodArgs<"deleteApplication()void">,
            params?: AppClientComposeCallCoreParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.deleteApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options })
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as CoinFlipComposer;
  }
}
export type CoinFlipComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setManager(address)void ABI method.
   *
   * Changes which address can manage this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setManager(
    args: MethodArgs<"setManager(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"setManager(address)void">]>;

  /**
   * Calls the getManager()address ABI method.
   *
   * Returns the current manager
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getManager(
    args: MethodArgs<"getManager()address">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"getManager()address">]>;

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Initialiase the app after creation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<"bootstrap()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"bootstrap()void">]>;

  /**
   * Calls the getFees()void ABI method.
   *
   * Allows manager to claim the fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFees(
    args: MethodArgs<"getFees()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"getFees()void">]>;

  /**
   * Calls the addPrizePool(axfer)void ABI method.
   *
   * Allows prize pool to be added, callable by anyone
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPrizePool(
    args: MethodArgs<"addPrizePool(axfer)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"addPrizePool(axfer)void">]>;

  /**
   * Calls the createGame(axfer,pay,uint64)uint64 ABI method.
   *
   * Creates a new game for the caller
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGame(
    args: MethodArgs<"createGame(axfer,pay,uint64)uint64">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<
    [...TReturns, MethodReturn<"createGame(axfer,pay,uint64)uint64">]
  >;

  /**
   * Calls the cancelGame(address)void ABI method.
   *
   * Allows user to cancel the game and request a refund (should be callable by admin)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelGame(
    args: MethodArgs<"cancelGame(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"cancelGame(address)void">]>;

  /**
   * Calls the completeGame(address)void ABI method.
   *
   * Completes a game by calling the beacon, determining the result and paying out the user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeGame(
    args: MethodArgs<"completeGame(address)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, MethodReturn<"completeGame(address)void">]>;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the CoinFlip smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(
      args: MethodArgs<"updateApplication()void">,
      params?: AppClientComposeCallCoreParams & AppClientCompilationParams
    ): CoinFlipComposer<[...TReturns, MethodReturn<"updateApplication()void">]>;
  };

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CoinFlip smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      args: MethodArgs<"deleteApplication()void">,
      params?: AppClientComposeCallCoreParams
    ): CoinFlipComposer<[...TReturns, MethodReturn<"deleteApplication()void">]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the CoinFlip smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
  ): CoinFlipComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): CoinFlipComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions
  ): Promise<CoinFlipComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams
  ): Promise<CoinFlipComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type CoinFlipComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type CoinFlipComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};

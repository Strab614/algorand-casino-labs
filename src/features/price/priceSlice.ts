import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { fetchData } from "./priceAPI";

export interface PriceState {
  loading: boolean;
  algoUSD: number;
  chipALGO: number;
  updatedAt: Date | null;
}

const initialState: PriceState = {
  loading: true,
  algoUSD: 0,
  chipALGO: 0,
  updatedAt: null,
};

export const updatePriceAsync = createAsyncThunk(
  "price/updatePrice",
  async () => {
    const response = await fetchData();

    return response;
  }
);

export const priceSlice = createSlice({
  name: "price",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.loading = true;
      state.algoUSD = 0;
      state.chipALGO = 0;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updatePriceAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(updatePriceAsync.fulfilled, (state, action) => {
        state.algoUSD = action.payload.algoUSD;
        state.chipALGO = action.payload.chipALGO;
        state.loading = false;
      });
  },
});

export const { reset } = priceSlice.actions;

export default priceSlice.reducer;

export const selectAlgoPrice = (state: RootState) => state.price.algoUSD;

export const selectChipPrice = (state: RootState) => state.price.chipALGO;

export const selectIsLoading = (state: RootState) => state.price.loading;

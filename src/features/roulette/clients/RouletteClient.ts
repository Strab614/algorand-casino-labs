/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from "@algorandfoundation/algokit-utils/types/algorand-client";
import {
  ABIReturn,
  AppReturn,
  SendAppTransactionResult,
} from "@algorandfoundation/algokit-utils/types/app";
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from "@algorandfoundation/algokit-utils/types/app-arc56";
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from "@algorandfoundation/algokit-utils/types/app-client";
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from "@algorandfoundation/algokit-utils/types/app-factory";
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from "@algorandfoundation/algokit-utils/types/composer";
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from "@algorandfoundation/algokit-utils/types/transaction";
import {
  Address,
  encodeAddress,
  modelsv2,
  OnApplicationComplete,
  Transaction,
  TransactionSigner,
} from "algosdk";
import SimulateResponse = modelsv2.SimulateResponse;

export const APP_SPEC: Arc56Contract = {
  name: "Roulette",
  structs: {
    RouletteGame: [
      { name: "mbrCoveredAmount", type: "uint64" },
      { name: "totalBetAmount", type: "uint64" },
      { name: "bets", type: "(uint8,uint8,uint64)[]" },
      { name: "revealRound", type: "uint64" },
    ],
  },
  methods: [
    {
      name: "createApplication",
      args: [
        {
          type: "application",
          name: "beaconApp",
          desc: "The Application ID for the randomness beacon",
        },
        { type: "asset", name: "betAsset" },
        { type: "uint64", name: "minBet", desc: "" },
        { type: "uint64", name: "maxBet", desc: "" },
      ],
      returns: { type: "void" },
      actions: { create: ["NoOp"], call: [] },
      readonly: false,
      desc: "Called upon creation only",
      events: [],
      recommendations: {},
    },
    {
      name: "updateApplication",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["UpdateApplication"] },
      readonly: false,
      desc: "Update the application (should not be available in final stable release)",
      events: [],
      recommendations: {},
    },
    {
      name: "deleteApplication",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["DeleteApplication"] },
      readonly: false,
      desc: "Delete the application",
      events: [],
      recommendations: {},
    },
    {
      name: "init",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Prepare the app after creation, eg opt-in",
      events: [],
      recommendations: {},
    },
    {
      name: "addPrizePool",
      args: [{ type: "axfer", name: "axfer" }],
      returns: { type: "uint64", desc: "The updated prize pool amount" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Adds to the prize pool",
      events: [],
      recommendations: {},
    },
    {
      name: "createGame",
      args: [
        {
          type: "(uint8,uint8,uint64)[]",
          name: "bets",
          desc: "Array of RouletteBet that the user wishes to place",
        },
        {
          type: "pay",
          name: "mbrFee",
          desc: "PaymentTxn to cover the mbr increase of the box creation",
        },
        {
          type: "axfer",
          name: "payment",
          desc: "AssetTransferTxn to cover the total amoint bet",
        },
      ],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Create a new game",
      events: [
        {
          name: "RouletteGameCreated",
          args: [
            { type: "uint64", name: "round" },
            { type: "address", name: "address" },
            { type: "uint64", name: "totalBetAmount" },
            { type: "(uint8,uint8,uint64)[]", name: "bets" },
          ],
          desc: "Events",
        },
      ],
      recommendations: {},
    },
    {
      name: "completeGame",
      args: [
        {
          type: "address",
          name: "address",
          desc: "which participant's game to complete",
        },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Complete a game, this will payout (if won), refund the mbr cost then delete the box",
      events: [
        {
          name: "RouletteGameCompleted",
          args: [
            { type: "uint64", name: "round" },
            { type: "address", name: "address" },
            { type: "uint64", name: "totalBetAmount" },
            { type: "(uint8,uint8,uint64)[]", name: "bets" },
            { type: "uint8", name: "winningNumber" },
            { type: "uint64", name: "profitAmount" },
          ],
          desc: "TODO include randomness seed data (and pk of vrf signer keypair) so user can verify result was fair",
        },
      ],
      recommendations: {},
    },
    {
      name: "cancelGame",
      args: [
        {
          type: "address",
          name: "address",
          desc: "which participant's game to cancel?",
        },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box",
      events: [
        {
          name: "RouletteGameCancelled",
          args: [
            { type: "uint64", name: "round" },
            { type: "address", name: "address" },
            { type: "uint64", name: "refundAmount" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "getMbrCost",
      args: [
        {
          type: "(uint8,uint8,uint64)[]",
          name: "bets",
          desc: "what bets does the user intend to make",
        },
      ],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      desc: "Convenience function to work out how much the mbr will increase by",
      events: [],
      recommendations: {},
    },
    {
      name: "updateManager",
      args: [{ type: "address", name: "newManager" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Update the manager of this contract",
      events: [],
      recommendations: {},
    },
    {
      name: "deleteManager",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Delete the manager of this contract",
      events: [],
      recommendations: {},
    },
    {
      name: "manager",
      args: [],
      returns: {
        type: "address",
        desc: "The current manager of this contract",
      },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      desc: "Convenience function to get the current manager of this contract",
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  networks: {},
  state: {
    schema: { global: { ints: 2, bytes: 5 }, local: { ints: 0, bytes: 0 } },
    keys: {
      global: {
        betAsset: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "YmV0QXNzZXQ=",
          desc: "What AssetID does the game accept for bets",
        },
        prizePool: {
          keyType: "AVMString",
          valueType: "uint64",
          key: "cHJpemVQb29s",
          desc: "Amount of funds available to wager against the house",
        },
        fees: {
          keyType: "AVMString",
          valueType: "uint64",
          key: "ZmVlcw==",
          desc: "How much fees are waiting to be claimed",
        },
        minBet: { keyType: "AVMString", valueType: "uint64", key: "bWluQmV0" },
        maxBet: {
          keyType: "AVMString",
          valueType: "uint64",
          key: "bWF4QmV0",
          desc: "Max bet",
        },
        _manager: {
          keyType: "AVMString",
          valueType: "address",
          key: "bWFuYWdlcg==",
        },
        _beaconApp: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "YmVhY29uQXBw",
          desc: "Randomness Beacon AppID",
        },
      },
      local: {},
      box: {
        game: {
          keyType: "AVMBytes",
          valueType: "RouletteGame",
          key: "",
          desc: "Each current game stored in a box",
        },
      },
    },
    maps: { global: {}, local: {}, box: {} },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        {
          pc: [798],
          errorMessage: "BET_TYPE_COLOR can only be 0 (red) or 1 (black)",
        },
        { pc: [826], errorMessage: "BET_TYPE_COLUMN can only be 0, 1 or 2" },
        { pc: [841], errorMessage: "BET_TYPE_DOZEN can only be 0, 1 or 2" },
        { pc: [857], errorMessage: "BET_TYPE_EIGHTEEN can only be 0 or 1" },
        {
          pc: [887],
          errorMessage: "BET_TYPE_NUMBER can only be between 0 and 37",
        },
        {
          pc: [872],
          errorMessage:
            "BET_TYPE_ODDS_OR_EVEN can only be 0 (odds) or 1 (evens)",
        },
        { pc: [1072, 2021], errorMessage: "Box must have value" },
        { pc: [1133], errorMessage: "Bytes has valid prefix" },
        {
          pc: [761, 1431, 1968, 2040],
          errorMessage: "Index access is out of bounds",
        },
        { pc: [408], errorMessage: "OnCompletion is not DeleteApplication" },
        {
          pc: [235, 251, 263, 278, 299, 314, 329, 368, 394, 433],
          errorMessage: "OnCompletion is not NoOp",
        },
        { pc: [421], errorMessage: "OnCompletion is not UpdateApplication" },
        {
          pc: [610],
          errorMessage: "app should not yet be opted in to the asset",
        },
        { pc: [519], errorMessage: "beacon app cannot be 0" },
        { pc: [437], errorMessage: "can only call when creating" },
        {
          pc: [238, 254, 266, 281, 302, 317, 332, 371, 397, 411, 424],
          errorMessage: "can only call when not creating",
        },
        {
          pc: [
            567, 600, 659, 676, 690, 715, 721, 726, 904, 1089, 1884, 1902, 2051,
            2184, 2218,
          ],
          errorMessage: "check GlobalState exists",
        },
        { pc: [710], errorMessage: "game already in progress" },
        { pc: [2201], errorMessage: "manager cannot be the zero address" },
        {
          pc: [959],
          errorMessage:
            "mbrFee must cover mbr increase, be sent to the app address and come from the caller",
        },
        {
          pc: [672],
          errorMessage:
            "must be a well formed transaction to the app address, from the caller and greater than 0",
        },
        { pc: [786], errorMessage: "must be greater than or equal to minBet" },
        { pc: [790], errorMessage: "must be less than or equal to maxBet" },
        { pc: [1083], errorMessage: "must be on or after the reveal round" },
        {
          pc: [2034],
          errorMessage: "must be on or after the revealRound + oracle deadline",
        },
        { pc: [738], errorMessage: "must have at least 1 bet" },
        { pc: [2188], errorMessage: "only the manager can call this method" },
        {
          pc: [981],
          errorMessage:
            "payment must equal total bet and be sent to the app address",
        },
        {
          pc: [900],
          errorMessage: "prizePool must be greater than totalBetAmount",
        },
        { pc: [737], errorMessage: "too many bets, max is 64" },
        { pc: [355, 381], errorMessage: "transaction type is axfer" },
        { pc: [345], errorMessage: "transaction type is pay" },
        { pc: [881], errorMessage: "unsupported bet type" },
      ],
      pcOffsetMethod: "none",
    },
    clear: { sourceInfo: [], pcOffsetMethod: "none" },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  byteCode: {
    approval:
      "CyAIAAECBK3+1eTUhf2oWM+Cnrvv796CFNGCnrvv796CFP////8PJgkJcHJpemVQb29sCGJldEFzc2V0B21hbmFnZXIEFR98dQliZWFjb25BcHAGbWluQmV0Bm1heEJldAgAAAAAAAAAAA5ib3ggbWJyIHJlZnVuZDEYQAAIKjIJZycEImcxG0EAW4IMBNgKlKQERvdlMwQkh8MsBIPxR0gEEnAq8wScCNaeBEtW5vgESbxDIQTy0wf1BIlgFo4E1I1CbARnQ0AxNhoAjgwAyAC7AK0AoQCHAGAAUQBCAC0AHgASAAIiQzEZFEQxGESIB7UrTFCwI0MxGRREMRhEiAedI0MxGRREMRhENhoBiAd9I0MxGRREMRhENhoBiAc0SBYrTFCwI0MxGRREMRhENhoBiAaqI0MxGRREMRhENhoBiALdI0MxGRREMRhENhoBMRYkCUk4ECMSRDEWIwlJOBAlEkSIAVErTFCwI0MxGRREMRhEMRYjCUk4ECUSRIgA9CtMULAjQzEZFEQxGESIAMQjQzEZgQUSRDEYRIgAjiNDMRklEkQxGESIAH0jQzEZFEQxGBRENhoBF8AyNhoCF8AwNhoDNhoEiAA3I0OKAQGL/xauFyMeRQGJigEBi/+BEpGL/xuBG5EhBxqL/4E7kUqRTIj/14EfGk8CTJAhBxoZiYoEAIv8RCcEi/xnKYv9ZycFi/5nJwaL/2eABGZlZXMnB2coJwdniYgGWYmIBlWxiAZzIillRLIRshUlshAisgGzsTIKiAZesgmyACOyECKyAbOJIillRDIKSwFwAEUBFESxMgoishKyFLIRJbIQIrIBs4mKAQGL/zgAMQASQQAyi/84FDIKEkEAKIv/OBEiKWVEEkEAHIv/OBJBABUjRCIoZUQXi/84EggWKExnIihlRIkiQv/oigMBIoAARwIxAL1FARREIicFZUQXIicGZUQXIihlRBeL/SJZRwKBQA5ERCJJiwmLBwxBAI6L/VcCAIsJgQoLgQpYSSRbSU4CjAFJIlVJTgOMAyNVjAJJiwQPRIsFDkRAABWLAiMORIsIiwEIjAiLCSMIjAlC/7aLAyMSQQAIiwIkDkRC/+GLAyQSQQAIiwIkDkRC/9KLA4EDEkEACIsCJAxEQv/CiwMlEkEACIsCJAxEQv+ziwOBBRJEiwKBJQ5EQv+kiwhJgSMLiwYORCIoZUQXCBYoTGeL/jgAMQASi/2MAEEAfIv+OAcyChKL/YwAQQBui/44CIv9iASgjP0Si/2MAEEAWyNEi/84EosIEkEAS4v/OBQyChJBAEEjRDIGIwgWi/44CBaLCBZMSwFQgAIAGlBLAlCL/VAxAEm8SEy/MgYWMQBQTFCAAgAyUIv9UIAEZAv1HkxQsIwAiSJC/7yLAIz9IkL/nooBACKAAEcKi/++TElPAkQyBkyBEltMSwEPRLEiJwRlREwWi/8VFlcGAov/UIAER8IMI7IaTLIashqyGIEGshAisgGztD5JVwAEKxJEVwYASRUiSwEPIksCTwJNgRBLAg+BEE8DTwJNUkkVgRASREkiWyIhBB1FAUkhBR5FAU8CHkUBIQQdRQEhBR5OA0hMgQhbTCEGHkUBHkUBIQQdRQEhBh5FAYACAABOAoEliPz8gSUYTgIiTgJMiw8jDEEAhYsRIQQdRQEhBR5JTgKMAUhAAG2BooW89t7fvYUoixBJIQQdRQFPAh5OAkiLEYj8yYEgkEyI/MIZSYwDiw4PQQA2iw1XAgCLA4ElGBZJFYEIChZXBgJMUFcCAFBJFYEIChZXBgJMUIwNiw8jCIwPjBCLAYwRQv+CjBCLAYwRQv+AIQZC/5iLDSRbjAqLDEmBEFlLARVSjAAijAcijASLACJZiwQNQQHMIowLiwBXAgCLBIEKC4EKWEkiVUlOAowJSSNVjAUkW4wCQACDiwUjEkEAT4sKgQoOQAAQiwqBFA9BADSLCoEcDkEALIsKJBgUjAsjjAaLB4wIiwtBAAyLAkmLBgsIiwcIjAiLCIwHiwQjCIwEQv+HiwokGCMSjAtC/9CLCoEKDkAAEIsKgRQPQQATiwqBHA5BAAuLCiQYIxKMC0L/rYsKJBgUjAtC/6OLCSMSQQAyiwVAAA+LCoEDGCMSjAskjAZC/4uLBSMSQQAMiwqBAxgkEowLQv/niwqBAxgUjAtC/9yLCSQSQQBgiwVAAByLCkEAEYsKgQwOQQAJI4wLJIwGQv9LIowLQv/0iwUjEkEAHIsKgQ0PQQAOiwqBGA5BAAYjjAtC/9cijAtC/9GLCoEZD0EADosKgSQOQQAGI4wLQv+7IowLQv+1iwmBAxJBAD2LBUAAHIsKQQARiwqBEg5BAAkjjAsjjAZC/uMijAtC//SLCoETD0EADosKgSQOQQAGI4wLQv/eIowLQv/YiwklEkEAHYsFQAAOiwokGCMSjAsjjAZC/qeLCiQYFIwLQv/wiwmBBRJBAA6LBYsKEowLgSOMBkL+hyKMBkL+gYsHQQA2IihlRBeLB0lOAgkWKExnsTIKIillRIAKYmV0IHBheW91dLIFshFMshKL/7IUsgAlshAisgGzsTIKiwxJTgIiWycIsgWyCIv/sgeyACOyECKyAbMyBhZMVwgIiwoWVwcBiwcWTwOL/1BPA1CAAgA7UE8CUExQiwBQgASC7kgbTFCwi/+8SImKAQCL/75EMgZLAYESW4HoCwgPRLEyCksBVwgISwKBCFsiKWVEgApiZXQgcmVmdW5ksgWyEbISi/+yFEyyACWyECKyAbOxMgpPAiJbJwiyBbIIi/+yB7IAI7IQIrIBszIGFov/UExQgATmhrnqTFCwi/+8SImKAQKAGgAAAAAAAAAAAAAAAAAAAAAAGgAAAAAAAAAAi/9QFYEgCIGQAwuBxBMIi/+JIiplRDEAEkSJigEAiP/xi/8yAxNEKov/Z4mI/+MqMgNniSIqZUSJ",
    clear: "C4EBQw==",
  },
  compilerInfo: {
    compiler: "puya",
    compilerVersion: { major: 4, minor: 5, patch: 3 },
  },
  events: [
    {
      name: "RouletteGameCreated",
      args: [
        { type: "uint64", name: "round" },
        { type: "address", name: "address" },
        { type: "uint64", name: "totalBetAmount" },
        { type: "(uint8,uint8,uint64)[]", name: "bets" },
      ],
      desc: "Events",
    },
    {
      name: "RouletteGameCompleted",
      args: [
        { type: "uint64", name: "round" },
        { type: "address", name: "address" },
        { type: "uint64", name: "totalBetAmount" },
        { type: "(uint8,uint8,uint64)[]", name: "bets" },
        { type: "uint8", name: "winningNumber" },
        { type: "uint64", name: "profitAmount" },
      ],
      desc: "TODO include randomness seed data (and pk of vrf signer keypair) so user can verify result was fair",
    },
    {
      name: "RouletteGameCancelled",
      args: [
        { type: "uint64", name: "round" },
        { type: "address", name: "address" },
        { type: "uint64", name: "refundAmount" },
      ],
    },
  ],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined
      ? Buffer.from(this.value).toString("utf-8")
      : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
  ? { [K in keyof O]: O[K] }
  : never;

// Type definitions for ARC-56 structs

export type RouletteGame = {
  mbrCoveredAmount: bigint;
  totalBetAmount: bigint;
  bets: [number, number, bigint][];
  revealRound: bigint;
};

/**
 * Converts the ABI tuple representation of a RouletteGame to the struct representation
 */
export function RouletteGameFromTuple(
  abiTuple: [bigint, bigint, [number, number, bigint][], bigint]
) {
  return getABIStructFromABITuple(
    abiTuple,
    APP_SPEC.structs.RouletteGame,
    APP_SPEC.structs
  ) as RouletteGame;
}

/**
 * The argument types for the Roulette contract
 */
export type RouletteArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    "createApplication(application,asset,uint64,uint64)void": {
      /**
       * The Application ID for the randomness beacon
       */
      beaconApp: bigint;
      betAsset: bigint;
      minBet: bigint | number;
      maxBet: bigint | number;
    };
    "updateApplication()void": Record<string, never>;
    "deleteApplication()void": Record<string, never>;
    "init()void": Record<string, never>;
    "addPrizePool(axfer)uint64": {
      axfer: AppMethodCallTransactionArgument;
    };
    "createGame((uint8,uint8,uint64)[],pay,axfer)uint64": {
      /**
       * Array of RouletteBet that the user wishes to place
       */
      bets: [bigint | number, bigint | number, bigint | number][];
      /**
       * PaymentTxn to cover the mbr increase of the box creation
       */
      mbrFee: AppMethodCallTransactionArgument;
      /**
       * AssetTransferTxn to cover the total amoint bet
       */
      payment: AppMethodCallTransactionArgument;
    };
    "completeGame(address)void": {
      /**
       * which participant's game to complete
       */
      address: string;
    };
    "cancelGame(address)void": {
      /**
       * which participant's game to cancel?
       */
      address: string;
    };
    "getMbrCost((uint8,uint8,uint64)[])uint64": {
      /**
       * what bets does the user intend to make
       */
      bets: [bigint | number, bigint | number, bigint | number][];
    };
    "updateManager(address)void": {
      newManager: string;
    };
    "deleteManager()void": Record<string, never>;
    "manager()address": Record<string, never>;
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    "createApplication(application,asset,uint64,uint64)void": [
      beaconApp: bigint,
      betAsset: bigint,
      minBet: bigint | number,
      maxBet: bigint | number
    ];
    "updateApplication()void": [];
    "deleteApplication()void": [];
    "init()void": [];
    "addPrizePool(axfer)uint64": [axfer: AppMethodCallTransactionArgument];
    "createGame((uint8,uint8,uint64)[],pay,axfer)uint64": [
      bets: [bigint | number, bigint | number, bigint | number][],
      mbrFee: AppMethodCallTransactionArgument,
      payment: AppMethodCallTransactionArgument
    ];
    "completeGame(address)void": [address: string];
    "cancelGame(address)void": [address: string];
    "getMbrCost((uint8,uint8,uint64)[])uint64": [
      bets: [bigint | number, bigint | number, bigint | number][]
    ];
    "updateManager(address)void": [newManager: string];
    "deleteManager()void": [];
    "manager()address": [];
  };
};

/**
 * The return type for each method
 */
export type RouletteReturns = {
  "createApplication(application,asset,uint64,uint64)void": void;
  "updateApplication()void": void;
  "deleteApplication()void": void;
  "init()void": void;
  "addPrizePool(axfer)uint64": bigint;
  "createGame((uint8,uint8,uint64)[],pay,axfer)uint64": bigint;
  "completeGame(address)void": void;
  "cancelGame(address)void": void;
  "getMbrCost((uint8,uint8,uint64)[])uint64": bigint;
  "updateManager(address)void": void;
  "deleteManager()void": void;
  "manager()address": string;
};

/**
 * Defines the types of available calls and state of the Roulette smart contract.
 */
export type RouletteTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    | "createApplication(application,asset,uint64,uint64)void"
    | "createApplication",
    {
      argsObj: RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"];
      argsTuple: RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"];
      returns: RouletteReturns["createApplication(application,asset,uint64,uint64)void"];
    }
  > &
    Record<
      "updateApplication()void" | "updateApplication",
      {
        argsObj: RouletteArgs["obj"]["updateApplication()void"];
        argsTuple: RouletteArgs["tuple"]["updateApplication()void"];
        returns: RouletteReturns["updateApplication()void"];
      }
    > &
    Record<
      "deleteApplication()void" | "deleteApplication",
      {
        argsObj: RouletteArgs["obj"]["deleteApplication()void"];
        argsTuple: RouletteArgs["tuple"]["deleteApplication()void"];
        returns: RouletteReturns["deleteApplication()void"];
      }
    > &
    Record<
      "init()void" | "init",
      {
        argsObj: RouletteArgs["obj"]["init()void"];
        argsTuple: RouletteArgs["tuple"]["init()void"];
        returns: RouletteReturns["init()void"];
      }
    > &
    Record<
      "addPrizePool(axfer)uint64" | "addPrizePool",
      {
        argsObj: RouletteArgs["obj"]["addPrizePool(axfer)uint64"];
        argsTuple: RouletteArgs["tuple"]["addPrizePool(axfer)uint64"];
        /**
         * The updated prize pool amount
         */
        returns: RouletteReturns["addPrizePool(axfer)uint64"];
      }
    > &
    Record<
      "createGame((uint8,uint8,uint64)[],pay,axfer)uint64" | "createGame",
      {
        argsObj: RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"];
        argsTuple: RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"];
        returns: RouletteReturns["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"];
      }
    > &
    Record<
      "completeGame(address)void" | "completeGame",
      {
        argsObj: RouletteArgs["obj"]["completeGame(address)void"];
        argsTuple: RouletteArgs["tuple"]["completeGame(address)void"];
        returns: RouletteReturns["completeGame(address)void"];
      }
    > &
    Record<
      "cancelGame(address)void" | "cancelGame",
      {
        argsObj: RouletteArgs["obj"]["cancelGame(address)void"];
        argsTuple: RouletteArgs["tuple"]["cancelGame(address)void"];
        returns: RouletteReturns["cancelGame(address)void"];
      }
    > &
    Record<
      "getMbrCost((uint8,uint8,uint64)[])uint64" | "getMbrCost",
      {
        argsObj: RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"];
        argsTuple: RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"];
        returns: RouletteReturns["getMbrCost((uint8,uint8,uint64)[])uint64"];
      }
    > &
    Record<
      "updateManager(address)void" | "updateManager",
      {
        argsObj: RouletteArgs["obj"]["updateManager(address)void"];
        argsTuple: RouletteArgs["tuple"]["updateManager(address)void"];
        returns: RouletteReturns["updateManager(address)void"];
      }
    > &
    Record<
      "deleteManager()void" | "deleteManager",
      {
        argsObj: RouletteArgs["obj"]["deleteManager()void"];
        argsTuple: RouletteArgs["tuple"]["deleteManager()void"];
        returns: RouletteReturns["deleteManager()void"];
      }
    > &
    Record<
      "manager()address" | "manager",
      {
        argsObj: RouletteArgs["obj"]["manager()address"];
        argsTuple: RouletteArgs["tuple"]["manager()address"];
        /**
         * The current manager of this contract
         */
        returns: RouletteReturns["manager()address"];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * What AssetID does the game accept for bets
         */
        betAsset: bigint;
        /**
         * Amount of funds available to wager against the house
         */
        prizePool: bigint;
        /**
         * How much fees are waiting to be claimed
         */
        fees: bigint;
        minBet: bigint;
        /**
         * Max bet
         */
        maxBet: bigint;
        _manager: string;
        /**
         * Randomness Beacon AppID
         */
        _beaconApp: bigint;
      };
      maps: {};
    };
    box: {
      keys: {
        /**
         * Each current game stored in a box
         */
        game: RouletteGame;
      };
      maps: {};
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type RouletteSignatures = keyof RouletteTypes["methods"];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RouletteNonVoidMethodSignatures =
  keyof RouletteTypes["methods"] extends infer T
    ? T extends keyof RouletteTypes["methods"]
      ? MethodReturn<T> extends void
        ? never
        : T
      : never
    : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, "method" | "args" | "onComplete"> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the Roulette smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RouletteSignatures> =
  RouletteTypes["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Roulette smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RouletteSignatures> =
  RouletteTypes["methods"][TSignature]["returns"];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RouletteTypes["state"]["global"]["keys"];

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = RouletteTypes["state"]["box"]["keys"];

/**
 * Defines supported create method params for this smart contract
 */
export type RouletteCreateCallParams =
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
        | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
      > & { method: "createApplication" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
        | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
      > & {
        method: "createApplication(application,asset,uint64,uint64)void";
      } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >;
/**
 * Defines supported update method params for this smart contract
 */
export type RouletteUpdateCallParams =
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["updateApplication()void"]
        | RouletteArgs["tuple"]["updateApplication()void"]
      > & { method: "updateApplication" }
    >
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["updateApplication()void"]
        | RouletteArgs["tuple"]["updateApplication()void"]
      > & { method: "updateApplication()void" }
    >;
/**
 * Defines supported delete method params for this smart contract
 */
export type RouletteDeleteCallParams =
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["deleteApplication()void"]
        | RouletteArgs["tuple"]["deleteApplication()void"]
      > & { method: "deleteApplication" }
    >
  | Expand<
      CallParams<
        | RouletteArgs["obj"]["deleteApplication()void"]
        | RouletteArgs["tuple"]["deleteApplication()void"]
      > & { method: "deleteApplication()void" }
    >;
/**
 * Defines arguments required for the deploy method.
 */
export type RouletteDeployParams = Expand<
  Omit<
    AppFactoryDeployParams,
    "createParams" | "updateParams" | "deleteParams"
  > & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: RouletteCreateCallParams;
    /**
     * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    updateParams?: RouletteUpdateCallParams;
    /**
     * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    deleteParams?: RouletteDeleteCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Roulette smart contract
 */
export abstract class RouletteParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<
        TParams extends RouletteCreateCallParams & { method: string }
      >(params: TParams) {
        switch (params.method) {
          case "createApplication":
          case "createApplication(application,asset,uint64,uint64)void":
            return RouletteParamsFactory.create.createApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs create ABI call params for the Roulette smart contract using the createApplication(application,asset,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
          | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
        > &
          AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
          }
      ): AppClientMethodCallParams &
        AppClientCompilationParams & {
          onComplete?: OnApplicationComplete.NoOpOC;
        } {
        return {
          ...params,
          method:
            "createApplication(application,asset,uint64,uint64)void" as const,
          args: Array.isArray(params.args)
            ? params.args
            : [
                params.args.beaconApp,
                params.args.betAsset,
                params.args.minBet,
                params.args.maxBet,
              ],
        };
      },
    };
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<
        TParams extends RouletteUpdateCallParams & { method: string }
      >(params: TParams) {
        switch (params.method) {
          case "updateApplication":
          case "updateApplication()void":
            return RouletteParamsFactory.update.updateApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs update ABI call params for the Roulette smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(
        params: CallParams<
          | RouletteArgs["obj"]["updateApplication()void"]
          | RouletteArgs["tuple"]["updateApplication()void"]
        > &
          AppClientCompilationParams
      ): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: "updateApplication()void" as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<
        TParams extends RouletteDeleteCallParams & { method: string }
      >(params: TParams) {
        switch (params.method) {
          case "deleteApplication":
          case "deleteApplication()void":
            return RouletteParamsFactory.delete.deleteApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs delete ABI call params for the Roulette smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(
        params: CallParams<
          | RouletteArgs["obj"]["deleteApplication()void"]
          | RouletteArgs["tuple"]["deleteApplication()void"]
        >
      ): AppClientMethodCallParams {
        return {
          ...params,
          method: "deleteApplication()void" as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the init()void ABI method
   *
   * Prepare the app after creation, eg opt-in
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(
    params: CallParams<
      RouletteArgs["obj"]["init()void"] | RouletteArgs["tuple"]["init()void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "init()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the addPrizePool(axfer)uint64 ABI method
   *
   * Adds to the prize pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPrizePool(
    params: CallParams<
      | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
      | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "addPrizePool(axfer)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer],
    };
  }
  /**
   * Constructs a no op call for the createGame((uint8,uint8,uint64)[],pay,axfer)uint64 ABI method
   *
   * Create a new game
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGame(
    params: CallParams<
      | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
      | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "createGame((uint8,uint8,uint64)[],pay,axfer)uint64" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.bets, params.args.mbrFee, params.args.payment],
    };
  }
  /**
   * Constructs a no op call for the completeGame(address)void ABI method
   *
   * Complete a game, this will payout (if won), refund the mbr cost then delete the box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static completeGame(
    params: CallParams<
      | RouletteArgs["obj"]["completeGame(address)void"]
      | RouletteArgs["tuple"]["completeGame(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "completeGame(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    };
  }
  /**
   * Constructs a no op call for the cancelGame(address)void ABI method
   *
   * Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelGame(
    params: CallParams<
      | RouletteArgs["obj"]["cancelGame(address)void"]
      | RouletteArgs["tuple"]["cancelGame(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "cancelGame(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    };
  }
  /**
   * Constructs a no op call for the getMbrCost((uint8,uint8,uint64)[])uint64 ABI method
   *
   * Convenience function to work out how much the mbr will increase by
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMbrCost(
    params: CallParams<
      | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getMbrCost((uint8,uint8,uint64)[])uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.bets],
    };
  }
  /**
   * Constructs a no op call for the updateManager(address)void ABI method
   *
   * Update the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManager(
    params: CallParams<
      | RouletteArgs["obj"]["updateManager(address)void"]
      | RouletteArgs["tuple"]["updateManager(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "updateManager(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newManager],
    };
  }
  /**
   * Constructs a no op call for the deleteManager()void ABI method
   *
   * Delete the manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteManager(
    params: CallParams<
      | RouletteArgs["obj"]["deleteManager()void"]
      | RouletteArgs["tuple"]["deleteManager()void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "deleteManager()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the manager()address ABI method
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static manager(
    params: CallParams<
      | RouletteArgs["obj"]["manager()address"]
      | RouletteArgs["tuple"]["manager()address"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "manager()address" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the Roulette smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RouletteFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `RouletteFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, "appSpec">) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RouletteClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams
  ) {
    return new RouletteClient(
      await this.appFactory.getAppClientByCreatorAndName(params)
    );
  }

  /**
   * Idempotently deploys the Roulette smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RouletteDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? RouletteParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
        ? (params.createParams as RouletteCreateCallParams & {
            args: Uint8Array[];
          })
        : undefined,
      updateParams: params.updateParams?.method
        ? RouletteParamsFactory.update._resolveByMethod(params.updateParams)
        : params.updateParams
        ? (params.updateParams as RouletteUpdateCallParams & {
            args: Uint8Array[];
          })
        : undefined,
      deleteParams: params.deleteParams?.method
        ? RouletteParamsFactory.delete._resolveByMethod(params.deleteParams)
        : params.deleteParams
        ? (params.deleteParams as RouletteDeleteCallParams & {
            args: Uint8Array[];
          })
        : undefined,
    });
    return {
      result: result.result,
      appClient: new RouletteClient(result.appClient),
    };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Roulette smart contract using the createApplication(application,asset,uint64,uint64)void ABI method.
       *
       * Called upon creation only
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
          | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.params.create(
          RouletteParamsFactory.create.createApplication(params)
        );
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Roulette smart contract using the updateApplication()void ABI method.
       *
       * Update the application (should not be available in final stable release)
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["updateApplication()void"]
          | RouletteArgs["tuple"]["updateApplication()void"]
        > &
          AppClientCompilationParams = { args: [] }
      ) => {
        return this.appFactory.params.deployUpdate(
          RouletteParamsFactory.update.updateApplication(params)
        );
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Roulette smart contract using the deleteApplication()void ABI method.
       *
       * Delete the application
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["deleteApplication()void"]
          | RouletteArgs["tuple"]["deleteApplication()void"]
        > = { args: [] }
      ) => {
        return this.appFactory.params.deployDelete(
          RouletteParamsFactory.delete.deleteApplication(params)
        );
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Roulette smart contract using the createApplication(application,asset,uint64,uint64)void ABI method.
       *
       * Called upon creation only
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
          | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.createTransaction.create(
          RouletteParamsFactory.create.createApplication(params)
        );
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Roulette smart contract using an ABI method call using the createApplication(application,asset,uint64,uint64)void ABI method.
       *
       * Called upon creation only
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | RouletteArgs["obj"]["createApplication(application,asset,uint64,uint64)void"]
          | RouletteArgs["tuple"]["createApplication(application,asset,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        const result = await this.appFactory.send.create(
          RouletteParamsFactory.create.createApplication(params)
        );
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | RouletteReturns["createApplication(application,asset,uint64,uint64)void"],
          },
          appClient: new RouletteClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the Roulette smart contract
 */
export class RouletteClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `RouletteClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Roulette app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `RouletteClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, "appSpec">);
  constructor(
    appClientOrParams: _AppClient | Omit<AppClientParams, "appSpec">
  ) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RouletteNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `RouletteClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, "appSpec">
  ): Promise<RouletteClient> {
    return new RouletteClient(
      await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC })
    );
  }

  /**
   * Returns an `RouletteClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, "appSpec">
  ): Promise<RouletteClient> {
    return new RouletteClient(
      await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC })
    );
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Roulette smart contract using the `updateApplication()void` ABI method.
       *
       * Update the application (should not be available in final stable release)
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["updateApplication()void"]
          | RouletteArgs["tuple"]["updateApplication()void"]
        > &
          AppClientCompilationParams = { args: [] }
      ) => {
        return this.appClient.params.update(
          RouletteParamsFactory.update.updateApplication(params)
        );
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Roulette smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete the application
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["deleteApplication()void"]
          | RouletteArgs["tuple"]["deleteApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.params.delete(
          RouletteParamsFactory.delete.deleteApplication(params)
        );
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Roulette smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the Roulette smart contract using the `init()void` ABI method.
     *
     * Prepare the app after creation, eg opt-in
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (
      params: CallParams<
        RouletteArgs["obj"]["init()void"] | RouletteArgs["tuple"]["init()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(RouletteParamsFactory.init(params));
    },

    /**
     * Makes a call to the Roulette smart contract using the `addPrizePool(axfer)uint64` ABI method.
     *
     * Adds to the prize pool
     *
     * @param params The params for the smart contract call
     * @returns The call params: The updated prize pool amount
     */
    addPrizePool: (
      params: CallParams<
        | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
        | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.addPrizePool(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `createGame((uint8,uint8,uint64)[],pay,axfer)uint64` ABI method.
     *
     * Create a new game
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGame: (
      params: CallParams<
        | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
        | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.createGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `completeGame(address)void` ABI method.
     *
     * Complete a game, this will payout (if won), refund the mbr cost then delete the box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    completeGame: (
      params: CallParams<
        | RouletteArgs["obj"]["completeGame(address)void"]
        | RouletteArgs["tuple"]["completeGame(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.completeGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `cancelGame(address)void` ABI method.
     *
     * Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelGame: (
      params: CallParams<
        | RouletteArgs["obj"]["cancelGame(address)void"]
        | RouletteArgs["tuple"]["cancelGame(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.cancelGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `getMbrCost((uint8,uint8,uint64)[])uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to work out how much the mbr will increase by
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMbrCost: (
      params: CallParams<
        | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
        | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.getMbrCost(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManager: (
      params: CallParams<
        | RouletteArgs["obj"]["updateManager(address)void"]
        | RouletteArgs["tuple"]["updateManager(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.updateManager(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteManager: (
      params: CallParams<
        | RouletteArgs["obj"]["deleteManager()void"]
        | RouletteArgs["tuple"]["deleteManager()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(
        RouletteParamsFactory.deleteManager(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current manager of this contract
     */
    manager: (
      params: CallParams<
        | RouletteArgs["obj"]["manager()address"]
        | RouletteArgs["tuple"]["manager()address"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(RouletteParamsFactory.manager(params));
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Roulette smart contract using the `updateApplication()void` ABI method.
       *
       * Update the application (should not be available in final stable release)
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["updateApplication()void"]
          | RouletteArgs["tuple"]["updateApplication()void"]
        > &
          AppClientCompilationParams = { args: [] }
      ) => {
        return this.appClient.createTransaction.update(
          RouletteParamsFactory.update.updateApplication(params)
        );
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Roulette smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete the application
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (
        params: CallParams<
          | RouletteArgs["obj"]["deleteApplication()void"]
          | RouletteArgs["tuple"]["deleteApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.createTransaction.delete(
          RouletteParamsFactory.delete.deleteApplication(params)
        );
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Roulette smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the Roulette smart contract using the `init()void` ABI method.
     *
     * Prepare the app after creation, eg opt-in
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (
      params: CallParams<
        RouletteArgs["obj"]["init()void"] | RouletteArgs["tuple"]["init()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.init(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `addPrizePool(axfer)uint64` ABI method.
     *
     * Adds to the prize pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The updated prize pool amount
     */
    addPrizePool: (
      params: CallParams<
        | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
        | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.addPrizePool(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `createGame((uint8,uint8,uint64)[],pay,axfer)uint64` ABI method.
     *
     * Create a new game
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGame: (
      params: CallParams<
        | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
        | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.createGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `completeGame(address)void` ABI method.
     *
     * Complete a game, this will payout (if won), refund the mbr cost then delete the box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    completeGame: (
      params: CallParams<
        | RouletteArgs["obj"]["completeGame(address)void"]
        | RouletteArgs["tuple"]["completeGame(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.completeGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `cancelGame(address)void` ABI method.
     *
     * Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelGame: (
      params: CallParams<
        | RouletteArgs["obj"]["cancelGame(address)void"]
        | RouletteArgs["tuple"]["cancelGame(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.cancelGame(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `getMbrCost((uint8,uint8,uint64)[])uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to work out how much the mbr will increase by
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMbrCost: (
      params: CallParams<
        | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
        | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.getMbrCost(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManager: (
      params: CallParams<
        | RouletteArgs["obj"]["updateManager(address)void"]
        | RouletteArgs["tuple"]["updateManager(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.updateManager(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteManager: (
      params: CallParams<
        | RouletteArgs["obj"]["deleteManager()void"]
        | RouletteArgs["tuple"]["deleteManager()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.deleteManager(params)
      );
    },

    /**
     * Makes a call to the Roulette smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current manager of this contract
     */
    manager: (
      params: CallParams<
        | RouletteArgs["obj"]["manager()address"]
        | RouletteArgs["tuple"]["manager()address"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        RouletteParamsFactory.manager(params)
      );
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Roulette smart contract using the `updateApplication()void` ABI method.
       *
       * Update the application (should not be available in final stable release)
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (
        params: CallParams<
          | RouletteArgs["obj"]["updateApplication()void"]
          | RouletteArgs["tuple"]["updateApplication()void"]
        > &
          AppClientCompilationParams &
          SendParams = { args: [] }
      ) => {
        const result = await this.appClient.send.update(
          RouletteParamsFactory.update.updateApplication(params)
        );
        return {
          ...result,
          return: result.return as unknown as
            | undefined
            | RouletteReturns["updateApplication()void"],
        };
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Roulette smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete the application
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (
        params: CallParams<
          | RouletteArgs["obj"]["deleteApplication()void"]
          | RouletteArgs["tuple"]["deleteApplication()void"]
        > &
          SendParams = { args: [] }
      ) => {
        const result = await this.appClient.send.delete(
          RouletteParamsFactory.delete.deleteApplication(params)
        );
        return {
          ...result,
          return: result.return as unknown as
            | undefined
            | RouletteReturns["deleteApplication()void"],
        };
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Roulette smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the Roulette smart contract using the `init()void` ABI method.
     *
     * Prepare the app after creation, eg opt-in
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (
      params: CallParams<
        RouletteArgs["obj"]["init()void"] | RouletteArgs["tuple"]["init()void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.init(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["init()void"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `addPrizePool(axfer)uint64` ABI method.
     *
     * Adds to the prize pool
     *
     * @param params The params for the smart contract call
     * @returns The call result: The updated prize pool amount
     */
    addPrizePool: async (
      params: CallParams<
        | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
        | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.addPrizePool(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["addPrizePool(axfer)uint64"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `createGame((uint8,uint8,uint64)[],pay,axfer)uint64` ABI method.
     *
     * Create a new game
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGame: async (
      params: CallParams<
        | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
        | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.createGame(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `completeGame(address)void` ABI method.
     *
     * Complete a game, this will payout (if won), refund the mbr cost then delete the box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    completeGame: async (
      params: CallParams<
        | RouletteArgs["obj"]["completeGame(address)void"]
        | RouletteArgs["tuple"]["completeGame(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.completeGame(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["completeGame(address)void"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `cancelGame(address)void` ABI method.
     *
     * Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelGame: async (
      params: CallParams<
        | RouletteArgs["obj"]["cancelGame(address)void"]
        | RouletteArgs["tuple"]["cancelGame(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.cancelGame(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["cancelGame(address)void"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `getMbrCost((uint8,uint8,uint64)[])uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to work out how much the mbr will increase by
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMbrCost: async (
      params: CallParams<
        | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
        | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.getMbrCost(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["getMbrCost((uint8,uint8,uint64)[])uint64"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `updateManager(address)void` ABI method.
     *
     * Update the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManager: async (
      params: CallParams<
        | RouletteArgs["obj"]["updateManager(address)void"]
        | RouletteArgs["tuple"]["updateManager(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.updateManager(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["updateManager(address)void"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `deleteManager()void` ABI method.
     *
     * Delete the manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteManager: async (
      params: CallParams<
        | RouletteArgs["obj"]["deleteManager()void"]
        | RouletteArgs["tuple"]["deleteManager()void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.deleteManager(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["deleteManager()void"],
      };
    },

    /**
     * Makes a call to the Roulette smart contract using the `manager()address` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Convenience function to get the current manager of this contract
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current manager of this contract
     */
    manager: async (
      params: CallParams<
        | RouletteArgs["obj"]["manager()address"]
        | RouletteArgs["tuple"]["manager()address"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        RouletteParamsFactory.manager(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | RouletteReturns["manager()address"],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RouletteClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the Roulette smart contract using the `getMbrCost((uint8,uint8,uint64)[])uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to work out how much the mbr will increase by
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMbrCost(
    params: CallParams<
      | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
    >
  ) {
    const result = await this.appClient.send.call(
      RouletteParamsFactory.getMbrCost(params)
    );
    return result.return as unknown as RouletteReturns["getMbrCost((uint8,uint8,uint64)[])uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Roulette smart contract using the `manager()address` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current manager of this contract
   */
  async manager(
    params: CallParams<
      | RouletteArgs["obj"]["manager()address"]
      | RouletteArgs["tuple"]["manager()address"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(
      RouletteParamsFactory.manager(params)
    );
    return result.return as unknown as RouletteReturns["manager()address"];
  }

  /**
   * Methods to access state for the current Roulette app
   */
  state = {
    /**
     * Methods to access global state for the current Roulette app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          betAsset: result.betAsset,
          prizePool: result.prizePool,
          fees: result.fees,
          minBet: result.minBet,
          maxBet: result.maxBet,
          _manager: result._manager,
          _beaconApp: result._beaconApp,
        };
      },
      /**
       * Get the current value of the betAsset key in global state
       */
      betAsset: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("betAsset")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the prizePool key in global state
       */
      prizePool: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("prizePool")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the fees key in global state
       */
      fees: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("fees")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the minBet key in global state
       */
      minBet: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("minBet")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the maxBet key in global state
       */
      maxBet: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("maxBet")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the _manager key in global state
       */
      _manager: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("_manager")) as
          | string
          | undefined;
      },
      /**
       * Get the current value of the _beaconApp key in global state
       */
      _beaconApp: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("_beaconApp")) as
          | bigint
          | undefined;
      },
    },
    /**
     * Methods to access box state for the current Roulette app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll();
        return {
          game: result.game,
        };
      },
      /**
       * Get the current value of the game key in box state
       */
      game: async (): Promise<RouletteGame | undefined> => {
        return (await this.appClient.state.box.getValue("game")) as
          | RouletteGame
          | undefined;
      },
    },
  };

  public newGroup(): RouletteComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<
      undefined | ((x: ABIReturn | undefined) => any)
    > = [];
    return {
      /**
       * Add a init()void method call against the Roulette contract
       */
      init(
        params: CallParams<
          | RouletteArgs["obj"]["init()void"]
          | RouletteArgs["tuple"]["init()void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.init(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a addPrizePool(axfer)uint64 method call against the Roulette contract
       */
      addPrizePool(
        params: CallParams<
          | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
          | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.addPrizePool(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("addPrizePool(axfer)uint64", v)
        );
        return this;
      },
      /**
       * Add a createGame((uint8,uint8,uint64)[],pay,axfer)uint64 method call against the Roulette contract
       */
      createGame(
        params: CallParams<
          | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
          | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.createGame(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            "createGame((uint8,uint8,uint64)[],pay,axfer)uint64",
            v
          )
        );
        return this;
      },
      /**
       * Add a completeGame(address)void method call against the Roulette contract
       */
      completeGame(
        params: CallParams<
          | RouletteArgs["obj"]["completeGame(address)void"]
          | RouletteArgs["tuple"]["completeGame(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.completeGame(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a cancelGame(address)void method call against the Roulette contract
       */
      cancelGame(
        params: CallParams<
          | RouletteArgs["obj"]["cancelGame(address)void"]
          | RouletteArgs["tuple"]["cancelGame(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.cancelGame(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a getMbrCost((uint8,uint8,uint64)[])uint64 method call against the Roulette contract
       */
      getMbrCost(
        params: CallParams<
          | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
          | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getMbrCost(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            "getMbrCost((uint8,uint8,uint64)[])uint64",
            v
          )
        );
        return this;
      },
      /**
       * Add a updateManager(address)void method call against the Roulette contract
       */
      updateManager(
        params: CallParams<
          | RouletteArgs["obj"]["updateManager(address)void"]
          | RouletteArgs["tuple"]["updateManager(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.updateManager(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a deleteManager()void method call against the Roulette contract
       */
      deleteManager(
        params: CallParams<
          | RouletteArgs["obj"]["deleteManager()void"]
          | RouletteArgs["tuple"]["deleteManager()void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.deleteManager(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a manager()address method call against the Roulette contract
       */
      manager(
        params: CallParams<
          | RouletteArgs["obj"]["manager()address"]
          | RouletteArgs["tuple"]["manager()address"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.manager(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("manager()address", v)
        );
        return this;
      },
      get update() {
        return {
          updateApplication: (
            params: CallParams<
              | RouletteArgs["obj"]["updateApplication()void"]
              | RouletteArgs["tuple"]["updateApplication()void"]
            > &
              AppClientCompilationParams
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppUpdateMethodCall(
                await client.params.update.updateApplication(params)
              )
            );
            resultMappers.push(undefined);
            return this;
          },
        };
      },
      get delete() {
        return {
          deleteApplication: (
            params: CallParams<
              | RouletteArgs["obj"]["deleteApplication()void"]
              | RouletteArgs["tuple"]["deleteApplication()void"]
            >
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppDeleteMethodCall(
                await client.params.delete.deleteApplication(params)
              )
            );
            resultMappers.push(undefined);
            return this;
          },
        };
      },
      /**
       * Add a clear state call to the Roulette contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() =>
          composer.addAppCall(client.params.clearState(params))
        );
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() =>
          composer.addTransaction(txn, signer)
        );
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options
          ? composer.simulate()
          : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
    } as unknown as RouletteComposer;
  }
}
export type RouletteComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init()void ABI method.
   *
   * Prepare the app after creation, eg opt-in
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(
    params?: CallParams<
      RouletteArgs["obj"]["init()void"] | RouletteArgs["tuple"]["init()void"]
    >
  ): RouletteComposer<[...TReturns, RouletteReturns["init()void"] | undefined]>;

  /**
   * Calls the addPrizePool(axfer)uint64 ABI method.
   *
   * Adds to the prize pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPrizePool(
    params?: CallParams<
      | RouletteArgs["obj"]["addPrizePool(axfer)uint64"]
      | RouletteArgs["tuple"]["addPrizePool(axfer)uint64"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["addPrizePool(axfer)uint64"] | undefined]
  >;

  /**
   * Calls the createGame((uint8,uint8,uint64)[],pay,axfer)uint64 ABI method.
   *
   * Create a new game
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGame(
    params?: CallParams<
      | RouletteArgs["obj"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
      | RouletteArgs["tuple"]["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
    >
  ): RouletteComposer<
    [
      ...TReturns,
      (
        | RouletteReturns["createGame((uint8,uint8,uint64)[],pay,axfer)uint64"]
        | undefined
      )
    ]
  >;

  /**
   * Calls the completeGame(address)void ABI method.
   *
   * Complete a game, this will payout (if won), refund the mbr cost then delete the box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeGame(
    params?: CallParams<
      | RouletteArgs["obj"]["completeGame(address)void"]
      | RouletteArgs["tuple"]["completeGame(address)void"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["completeGame(address)void"] | undefined]
  >;

  /**
   * Calls the cancelGame(address)void ABI method.
   *
   * Cancel a game in progress, refunds total bet amount, the mbr cost then deletes the box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelGame(
    params?: CallParams<
      | RouletteArgs["obj"]["cancelGame(address)void"]
      | RouletteArgs["tuple"]["cancelGame(address)void"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["cancelGame(address)void"] | undefined]
  >;

  /**
   * Calls the getMbrCost((uint8,uint8,uint64)[])uint64 ABI method.
   *
   * Convenience function to work out how much the mbr will increase by
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrCost(
    params?: CallParams<
      | RouletteArgs["obj"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
      | RouletteArgs["tuple"]["getMbrCost((uint8,uint8,uint64)[])uint64"]
    >
  ): RouletteComposer<
    [
      ...TReturns,
      RouletteReturns["getMbrCost((uint8,uint8,uint64)[])uint64"] | undefined
    ]
  >;

  /**
   * Calls the updateManager(address)void ABI method.
   *
   * Update the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(
    params?: CallParams<
      | RouletteArgs["obj"]["updateManager(address)void"]
      | RouletteArgs["tuple"]["updateManager(address)void"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["updateManager(address)void"] | undefined]
  >;

  /**
   * Calls the deleteManager()void ABI method.
   *
   * Delete the manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteManager(
    params?: CallParams<
      | RouletteArgs["obj"]["deleteManager()void"]
      | RouletteArgs["tuple"]["deleteManager()void"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["deleteManager()void"] | undefined]
  >;

  /**
   * Calls the manager()address ABI method.
   *
   * Convenience function to get the current manager of this contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manager(
    params?: CallParams<
      | RouletteArgs["obj"]["manager()address"]
      | RouletteArgs["tuple"]["manager()address"]
    >
  ): RouletteComposer<
    [...TReturns, RouletteReturns["manager()address"] | undefined]
  >;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Roulette smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      params?: CallParams<
        | RouletteArgs["obj"]["deleteApplication()void"]
        | RouletteArgs["tuple"]["deleteApplication()void"]
      >
    ): RouletteComposer<
      [...TReturns, RouletteReturns["deleteApplication()void"] | undefined]
    >;
  };

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Roulette smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(
      params?: CallParams<
        | RouletteArgs["obj"]["updateApplication()void"]
        | RouletteArgs["tuple"]["updateApplication()void"]
      >
    ): RouletteComposer<
      [...TReturns, RouletteReturns["updateApplication()void"] | undefined]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the Roulette smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    params?: AppClientBareCallParams
  ): RouletteComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(
    txn: Transaction,
    signer?: TransactionSigner
  ): RouletteComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<
    RouletteComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<
    RouletteComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: RawSimulateOptions
  ): Promise<
    RouletteComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RouletteComposerResults<TReturns>>;
};
export type RouletteComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
